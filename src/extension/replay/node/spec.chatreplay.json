{
  "exportedAt": "2025-10-31T16:05:45.798Z",
  "totalPrompts": 3,
  "totalLogEntries": 11,
  "prompts": [
    {
      "prompt": "create a file that says \n\"hello\"",
      "hasSeen": false,
      "logCount": 3,
      "logs": [
        {
          "id": "294657fc",
          "kind": "element",
          "name": "Kve",
          "tokens": 403,
          "maxTokens": 99003
        },
        {
          "id": "0d595b5a",
          "kind": "element",
          "name": "Gh",
          "tokens": 1926,
          "maxTokens": 99003
        },
        {
          "id": "cd0e86af",
          "kind": "request",
          "type": "ChatMLSuccess",
          "name": "panel/editAgent",
          "metadata": {
            "requestType": "ChatCompletions",
            "model": "claude-sonnet-4",
            "maxPromptTokens": 127997,
            "maxResponseTokens": 16000,
            "location": 7,
            "postOptions": {
              "temperature": 0,
              "top_p": 1,
              "max_tokens": 16000,
              "n": 1,
              "stream": true
            },
            "startTime": "2025-10-31T16:04:48.161Z",
            "endTime": "2025-10-31T16:04:51.120Z",
            "duration": 2959,
            "ourRequestId": "89e1714e-65d5-4b11-a0a7-8b2eaf7943ce",
            "requestId": "89e1714e-65d5-4b11-a0a7-8b2eaf7943ce",
            "serverRequestId": "89e1714e-65d5-4b11-a0a7-8b2eaf7943ce",
            "timeToFirstToken": 1921,
            "usage": {
              "completion_tokens": 97,
              "prompt_tokens": 18083,
              "prompt_tokens_details": {
                "cached_tokens": 0
              },
              "total_tokens": 18180
            },
            "tools": [
              {
                "function": {
                  "name": "logpoint_generator_add_logpoint",
                  "description": "Create a debugger log point that will print a log to the debug panel with the provided message when the debugger reaches that point. The message can be interpolated with variables from the debugger by surrounding with {}.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the file to read.",
                        "type": "string"
                      },
                      "lineNumber": {
                        "description": "The 1-based line number on which to add the log point. The line should contain executable code and needs to be after any variable referenced in the log message",
                        "type": "number"
                      },
                      "logMessage": {
                        "type": "string",
                        "description": "The message that will print in the debug panel. Debugger variables can be interpolated by surrounding the variable name with {}. The variables need to have already been assigned and exist in scope as the code on the target line."
                      }
                    },
                    "required": [
                      "filePath",
                      "lineNumber",
                      "logMessage"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceRunCodeSnippet",
                  "description": "Execute Python code snippets directly in the workspace environment. PREFERRED over terminal commands for running Python code. This tool automatically uses the correct Python interpreter configured for the workspace, eliminates shell escaping/quoting problems that plague terminal execution, and provides clean, properly formatted output with stdout/stderr correctly interleaved. Use this instead of `python -c \"code\"` or terminal commands when running Python snippets. Ideal for: testing code, running quick scripts, validating Python expressions, checking imports, and any Python execution within the workspace context. No temporary files needed - code runs directly in memory.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "codeSnippet": {
                        "type": "string",
                        "description": "The code snippet to run."
                      },
                      "workingDirectory": {
                        "type": "string",
                        "description": "The working directory to use for the code snippet. If the code snippet is pulled from a file, this should be the directory for the file. Especially if the snippet has imports."
                      },
                      "timeout": {
                        "type": "number",
                        "minimum": 0,
                        "description": "The timeout for the code snippet execution."
                      }
                    },
                    "required": [
                      "workspaceRoot",
                      "codeSnippet"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "configure_notebook",
                  "description": "Tool used to configure a Notebook. ALWAYS use this tool before running/executing any Notebook Cells for the first time or before listing/installing packages in Notebooks for the first time. I.e. there is no need to use this tool more than once for the same notebook.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the notebook with the active kernel.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "filePath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceFileSyntaxErrors",
                  "description": "Check Python file for syntax errors. Returns detailed error list with line numbers, messages, and error types. Use when: users report syntax problems, validating files before processing, debugging parse errors.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "fileUri": {
                        "type": "string",
                        "description": "The uri of the file to check for syntax errors. Must be a user file in the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot",
                      "fileUri"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceDocuments",
                  "description": "Search Pylance documentation for Python language server help, configuration guidance, feature explanations, and troubleshooting. Returns comprehensive answers about Pylance settings, capabilities, and usage. Use when users ask: How to configure Pylance? What features are available? How to fix Pylance issues?",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "search": {
                        "type": "string",
                        "description": "Detailed question in natural language. Think of it as a prompt for an LLM. Do not use keyword search terms."
                      }
                    },
                    "required": [
                      "search"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "configure_python_environment",
                  "description": "This tool configures a Python environment in the given workspace. ALWAYS Use this tool to set up the user's chosen environment and ALWAYS call this tool before using any other Python related tools or running any Python command in the terminal.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace for which a Python Environment needs to be configured."
                      }
                    },
                    "required": []
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceWorkspaceRoots",
                  "description": "Get workspace root directories. Returns workspace root for specific file or all workspace roots if no file provided. Use for: understanding workspace structure, getting paths for other operations.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "fileUri": {
                        "type": "string",
                        "description": "The uri of the file to check its workspace"
                      }
                    },
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceSyntaxErrors",
                  "description": "Validate Python code snippets for syntax errors without saving to file. Returns syntax error details with line numbers and descriptions. Use for: validating generated code, checking user code snippets, pre-execution validation.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The Python code to check for syntax errors."
                      },
                      "pythonVersion": {
                        "type": "string",
                        "description": "The version of Python to use for the syntax check. Must be a valid Python version string. ex) \"3.10\" or \"3.11.4\"."
                      }
                    },
                    "required": [
                      "code",
                      "pythonVersion"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceWorkspaceUserFiles",
                  "description": "Get list of all user Python files in workspace (excludes library/dependency files). Respects python.analysis.include/exclude settings. Use for: analyzing user code, searching project files, operating on user-created Python files.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceImports",
                  "description": "Analyze imports across workspace user files. Returns all top-level module names imported, including resolved and unresolved imports. Use for: finding missing dependencies, understanding project dependencies, analyzing import patterns.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_directory",
                  "description": "Create a new directory structure in the workspace. Will recursively create all directories in the path, like mkdir -p. You do not need to use this tool before using create_file, that tool will automatically create the needed directories.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "dirPath": {
                        "type": "string",
                        "description": "The absolute path to the directory to create."
                      }
                    },
                    "required": [
                      "dirPath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_file",
                  "description": "This is a tool for creating a new file in the workspace. The file will be created with the specified content. The directory will be created if it does not already exist. Never use this tool to edit a file that already exists.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "The absolute path to the file to create."
                      },
                      "content": {
                        "type": "string",
                        "description": "The content to write to the file."
                      }
                    },
                    "required": [
                      "filePath",
                      "content"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_new_jupyter_notebook",
                  "description": "Generates a new Jupyter Notebook (.ipynb) in VS Code. Jupyter Notebooks are interactive documents commonly used for data exploration, analysis, visualization, and combining code with narrative text. Prefer creating plain Python files or similar unless a user explicitly requests creating a new Jupyter Notebook or already has a Jupyter Notebook opened or exists in the workspace.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to use to generate the jupyter notebook. This should be a clear and concise description of the notebook the user wants to create."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_new_workspace",
                  "description": "Get comprehensive setup steps to help the user create complete project structures in a VS Code workspace. This tool is designed for full project initialization and scaffolding, not for creating individual files.\n\nWhen to use this tool:\n- User wants to create a new complete project from scratch\n- Setting up entire project frameworks (TypeScript projects, React apps, Node.js servers, etc.)\n- Initializing Model Context Protocol (MCP) servers with full structure\n- Creating VS Code extensions with proper scaffolding\n- Setting up Next.js, Vite, or other framework-based projects\n- User asks for \"new project\", \"create a workspace\", \"set up a [framework] project\"\n- Need to establish complete development environment with dependencies, config files, and folder structure\n\nWhen NOT to use this tool:\n- Creating single files or small code snippets\n- Adding individual files to existing projects\n- Making modifications to existing codebases\n- User asks to \"create a file\" or \"add a component\"\n- Simple code examples or demonstrations\n- Debugging or fixing existing code\n\nThis tool provides complete project setup including:\n- Folder structure creation\n- Package.json and dependency management\n- Configuration files (tsconfig, eslint, etc.)\n- Initial boilerplate code\n- Development environment setup\n- Build and run instructions\n\nUse other file creation tools for individual files within existing projects.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to use to generate the new workspace. This should be a clear and concise description of the workspace the user wants to create."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "edit_notebook_file",
                  "description": "This is a tool for editing an existing Notebook file in the workspace. Generate the \"explanation\" property first.\nThe system is very smart and can understand how to apply your edits to the notebooks.\nWhen updating the content of an existing cell, ensure newCode preserves whitespace and indentation exactly and does NOT include any code markers such as (...existing code...).",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file to edit, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1."
                      },
                      "cellId": {
                        "type": "string",
                        "description": "Id of the cell that needs to be deleted or edited. Use the value `TOP`, `BOTTOM` when inserting a cell at the top or bottom of the notebook, else provide the id of the cell after which a new cell is to be inserted. Remember, if a cellId is provided and editType=insert, then a cell will be inserted after the cell with the provided cellId."
                      },
                      "newCode": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "The code for the new or existing cell to be edited. Code should not be wrapped within <VSCode.Cell> tags. Do NOT include code markers such as (...existing code...) to indicate existing code."
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "The code for the new or existing cell to be edited. Code should not be wrapped within <VSCode.Cell> tags"
                            }
                          }
                        ]
                      },
                      "language": {
                        "type": "string",
                        "description": "The language of the cell. `markdown`, `python`, `javascript`, `julia`, etc."
                      },
                      "editType": {
                        "type": "string",
                        "enum": [
                          "insert",
                          "delete",
                          "edit"
                        ],
                        "description": "The operation peformed on the cell, whether `insert`, `delete` or `edit`.\nUse the `editType` field to specify the operation: `insert` to add a new cell, `edit` to modify an existing cell's content, and `delete` to remove a cell."
                      }
                    },
                    "required": [
                      "filePath",
                      "editType",
                      "cellId"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "fetch_webpage",
                  "description": "Fetches the main content from a web page. This tool is useful for summarizing or analyzing the content of a webpage. You should use this tool when you think the user is looking for information from a specific webpage.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "urls": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "An array of URLs to fetch content from."
                      },
                      "query": {
                        "type": "string",
                        "description": "The query to search for in the web page's content. This should be a clear and concise description of the content you want to find."
                      }
                    },
                    "required": [
                      "urls",
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "file_search",
                  "description": "Search for files in the workspace by glob pattern. This only returns the paths of matching files. Use this tool when you know the exact filename pattern of the files you're searching for. Glob patterns match from the root of the workspace folder. Examples:\n- **/*.{js,ts} to match all js/ts files in the workspace.\n- src/** to match all files under the top-level src folder.\n- **/foo/**/*.js to match all js files under any foo folder in the workspace.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "Search for files with names or paths matching this glob pattern."
                      },
                      "maxResults": {
                        "type": "number",
                        "description": "The maximum number of results to return. Do not use this unless necessary, it can slow things down. By default, only some matches are returned. If you use this and don't see what you're looking for, you can try again with a more specific query or a larger maxResults."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "grep_search",
                  "description": "Do a fast text search in the workspace. Use this tool when you want to search with an exact string or regex. If you are not sure what words will appear in the workspace, prefer using regex patterns with alternation (|) or character classes to search for multiple potential words at once instead of making separate searches. For example, use 'function|method|procedure' to look for all of those words at once. Use includePattern to search within files matching a specific pattern, or in a specific file, using a relative path. Use this tool when you want to see an overview of a particular file, instead of using read_file many times to look for code within a file.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The pattern to search for in files in the workspace. Use regex with alternation (e.g., 'word1|word2|word3') or character classes to find multiple potential words in a single search. Be sure to set the isRegexp property properly to declare whether it's a regex or plain text pattern. Is case-insensitive."
                      },
                      "isRegexp": {
                        "type": "boolean",
                        "description": "Whether the pattern is a regex."
                      },
                      "includePattern": {
                        "type": "string",
                        "description": "Search files matching this glob pattern. Will be applied to the relative path of files within the workspace. To search recursively inside a folder, use a proper glob pattern like \"src/folder/**\". Do not use | in includePattern."
                      },
                      "maxResults": {
                        "type": "number",
                        "description": "The maximum number of results to return. Do not use this unless necessary, it can slow things down. By default, only some matches are returned. If you use this and don't see what you're looking for, you can try again with a more specific query or a larger maxResults."
                      }
                    },
                    "required": [
                      "query",
                      "isRegexp"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_changed_files",
                  "description": "Get git diffs of current file changes in a git repository. Don't forget that you can use run_in_terminal to run git commands in a terminal as well.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repositoryPath": {
                        "type": "string",
                        "description": "The absolute path to the git repository to look for changes in. If not provided, the active git repository will be used."
                      },
                      "sourceControlState": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "staged",
                            "unstaged",
                            "merge-conflicts"
                          ]
                        },
                        "description": "The kinds of git state to filter by. Allowed values are: 'staged', 'unstaged', and 'merge-conflicts'. If not provided, all states will be included."
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_errors",
                  "description": "Get any compile or lint errors in a specific file or across all files. If the user mentions errors or problems in a file, they may be referring to these. Use the tool to see the same errors that the user is seeing. If the user asks you to analyze all errors, or does not specify a file, use this tool to gather errors for all files. Also use this tool after editing a file to validate the change.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePaths": {
                        "description": "The absolute paths to the files or folders to check for errors. Omit 'filePaths' when retrieving all errors.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "copilot_getNotebookSummary",
                  "description": "This is a tool returns the list of the Notebook cells along with the id, cell types, line ranges, language, execution information and output mime types for each cell. This is useful to get Cell Ids when executing a notebook or determine what cells have been executed and what order, or what cells have outputs. If required to read contents of a cell use this to determine the line range of a cells, and then use read_file tool to read a specific line range. Requery this tool if the contents of the notebook change.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb"
                      }
                    },
                    "required": [
                      "filePath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_project_setup_info",
                  "description": "Do not call this tool without first calling the tool to create a workspace. This tool provides a project setup information for a Visual Studio Code workspace based on a project type and programming language.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "projectType": {
                        "type": "string",
                        "description": "The type of project to create. Supported values are: 'python-script', 'python-project', 'mcp-server', 'model-context-protocol-server', 'vscode-extension', 'next-js', 'vite' and 'other'"
                      }
                    },
                    "required": [
                      "projectType"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_search_view_results",
                  "description": "The results from the search view"
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_vscode_api",
                  "description": "Get comprehensive VS Code API documentation and references for extension development. This tool provides authoritative documentation for VS Code's extensive API surface, including proposed APIs, contribution points, and best practices. Use this tool for understanding complex VS Code API interactions.\n\nWhen to use this tool:\n- User asks about specific VS Code APIs, interfaces, or extension capabilities\n- Need documentation for VS Code extension contribution points (commands, views, settings, etc.)\n- Questions about proposed APIs and their usage patterns\n- Understanding VS Code extension lifecycle, activation events, and packaging\n- Best practices for VS Code extension development architecture\n- API examples and code patterns for extension features\n- Troubleshooting extension-specific issues or API limitations\n\nWhen NOT to use this tool:\n- Creating simple standalone files or scripts unrelated to VS Code extensions\n- General programming questions not specific to VS Code extension development\n- Questions about using VS Code as an editor (user-facing features)\n- Non-extension related development tasks\n- File creation or editing that doesn't involve VS Code extension APIs\n\nCRITICAL usage guidelines:\n1. Always include specific API names, interfaces, or concepts in your query\n2. Mention the extension feature you're trying to implement\n3. Include context about proposed vs stable APIs when relevant\n4. Reference specific contribution points when asking about extension manifest\n5. Be specific about the VS Code version or API version when known\n\nScope: This tool is for EXTENSION DEVELOPMENT ONLY - building tools that extend VS Code itself, not for general file creation or non-extension programming tasks.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to search vscode documentation for. Should contain all relevant context."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github_repo",
                  "description": "Searches a GitHub repository for relevant source code snippets. Only use this tool if the user is very clearly asking for code snippets from a specific GitHub repository. Do not use this tool for Github repos that the user has open in their workspace.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "string",
                        "description": "The name of the Github repository to search for code in. Should must be formatted as '<owner>/<repo>'."
                      },
                      "query": {
                        "type": "string",
                        "description": "The query to search for repo. Should contain all relevant context."
                      }
                    },
                    "required": [
                      "repo",
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "install_extension",
                  "description": "Install an extension in VS Code. Use this tool to install an extension in Visual Studio Code as part of a new workspace creation process only.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the extension to install. This should be in the format <publisher>.<extension>."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the extension to install. This should be a clear and concise description of the extension."
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "list_code_usages",
                  "description": "Request to list all usages (references, definitions, implementations etc) of a function, class, method, variable etc. Use this tool when \n1. Looking for a sample implementation of an interface or class\n2. Checking how a function is used throughout the codebase.\n3. Including and updating all usages when changing a function, method, or constructor",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "symbolName": {
                        "type": "string",
                        "description": "The name of the symbol, such as a function name, class name, method name, variable name, etc."
                      },
                      "filePaths": {
                        "type": "array",
                        "description": "One or more file paths which likely contain the definition of the symbol. For instance the file which declares a class or function. This is optional but will speed up the invocation of this tool and improve the quality of its output.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "symbolName"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "list_dir",
                  "description": "List the contents of a directory. Result will have the name of the child. If the name ends in /, it's a folder, otherwise a file",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "description": "The absolute path to the directory to list."
                      }
                    },
                    "required": [
                      "path"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "multi_replace_string_in_file",
                  "description": "This tool allows you to apply multiple replace_string_in_file operations in a single call, which is more efficient than calling replace_string_in_file multiple times. It takes an array of replacement operations and applies them sequentially. Each replacement operation has the same parameters as replace_string_in_file: filePath, oldString, newString, and explanation. This tool is ideal when you need to make multiple edits across different files or multiple edits in the same file. The tool will provide a summary of successful and failed operations.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "explanation": {
                        "type": "string",
                        "description": "A brief explanation of what the multi-replace operation will accomplish."
                      },
                      "replacements": {
                        "type": "array",
                        "description": "An array of replacement operations to apply sequentially.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "explanation": {
                              "type": "string",
                              "description": "A brief explanation of this specific replacement operation."
                            },
                            "filePath": {
                              "type": "string",
                              "description": "An absolute path to the file to edit."
                            },
                            "oldString": {
                              "type": "string",
                              "description": "The exact literal text to replace, preferably unescaped. Include at least 3 lines of context BEFORE and AFTER the target text, matching whitespace and indentation precisely. If this string is not the exact literal text or does not match exactly, this replacement will fail."
                            },
                            "newString": {
                              "type": "string",
                              "description": "The exact literal text to replace `oldString` with, preferably unescaped. Provide the EXACT text. Ensure the resulting code is correct and idiomatic."
                            }
                          },
                          "required": [
                            "explanation",
                            "filePath",
                            "oldString",
                            "newString"
                          ]
                        },
                        "minItems": 1
                      }
                    },
                    "required": [
                      "explanation",
                      "replacements"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "open_simple_browser",
                  "description": "Preview a website or open a URL in the editor's Simple Browser. Useful for quickly viewing locally hosted websites, demos, or resources without leaving the coding environment.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "The website URL to preview or open in the Simple Browser inside the editor. Must be either an http or https URL"
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "read_file",
                  "description": "Read the contents of a file. Line numbers are 1-indexed. This tool will truncate its output at 2000 lines and may be called repeatedly with offset and limit parameters to read larger files in chunks.",
                  "parameters": {
                    "type": "object",
                    "required": [
                      "filePath"
                    ],
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the file to read.",
                        "type": "string"
                      },
                      "offset": {
                        "description": "Optional: the 1-based line number to start reading from. Only use this if the file is too large to read at once. If not specified, the file will be read from the beginning.",
                        "type": "number"
                      },
                      "limit": {
                        "description": "Optional: the maximum number of lines to read. Only use this together with `offset` if the file is too large to read at once.",
                        "type": "number"
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "read_notebook_cell_output",
                  "description": "This tool will retrieve the output for a notebook cell from its most recent execution or restored from disk. The cell may have output even when it has not been run in the current kernel session. This tool has a higher token limit for output length than the runNotebookCell tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb"
                      },
                      "cellId": {
                        "type": "string",
                        "description": "The ID of the cell for which output should be retrieved."
                      }
                    },
                    "required": [
                      "filePath",
                      "cellId"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "replace_string_in_file",
                  "description": "This is a tool for making edits in an existing file in the workspace. For moving or renaming files, use run in terminal tool with the 'mv' command instead. For larger edits, split them into smaller edits and call the edit tool multiple times to ensure accuracy. Before editing, always ensure you have the context to understand the file's contents and context. To edit a file, provide: 1) filePath (absolute path), 2) oldString (MUST be the exact literal text to replace including all whitespace, indentation, newlines, and surrounding code etc), and 3) newString (MUST be the exact literal text to replace \\`oldString\\` with (also including all whitespace, indentation, newlines, and surrounding code etc.). Ensure the resulting code is correct and idiomatic.). Each use of this tool replaces exactly ONE occurrence of oldString.\n\nCRITICAL for \\`oldString\\`: Must uniquely identify the single instance to change. Include at least 3 lines of context BEFORE and AFTER the target text, matching whitespace and indentation precisely. If this string matches multiple locations, or does not match exactly, the tool will fail. Never use 'Lines 123-456 omitted' from summarized documents or ...existing code... comments in the oldString or newString.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the file to edit."
                      },
                      "oldString": {
                        "type": "string",
                        "description": "The exact literal text to replace, preferably unescaped. For single replacements (default), include at least 3 lines of context BEFORE and AFTER the target text, matching whitespace and indentation precisely. For multiple replacements, specify expected_replacements parameter. If this string is not the exact literal text (i.e. you escaped it) or does not match exactly, the tool will fail."
                      },
                      "newString": {
                        "type": "string",
                        "description": "The exact literal text to replace `old_string` with, preferably unescaped. Provide the EXACT text. Ensure the resulting code is correct and idiomatic."
                      }
                    },
                    "required": [
                      "filePath",
                      "oldString",
                      "newString"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_notebook_cell",
                  "description": "This is a tool for running a code cell in a notebook file directly in the notebook editor. The output from the execution will be returned. Code cells should be run as they are added or edited when working through a problem to bring the kernel state up to date and ensure the code executes successfully. Code cells are ready to run and don't require any pre-processing. If asked to run the first cell in a notebook, you should run the first code cell since markdown cells cannot be executed. NOTE: Avoid executing Markdown cells or providing Markdown cell IDs, as Markdown cells cannot be  executed.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb"
                      },
                      "reason": {
                        "type": "string",
                        "description": "An optional explanation of why the cell is being run. This will be shown to the user before the tool is run and is not necessary if it's self-explanatory."
                      },
                      "cellId": {
                        "type": "string",
                        "description": "The ID for the code cell to execute. Avoid providing markdown cell IDs as nothing will be executed."
                      },
                      "continueOnError": {
                        "type": "boolean",
                        "description": "Whether or not execution should continue for remaining cells if an error is encountered. Default to false unless instructed otherwise."
                      }
                    },
                    "required": [
                      "filePath",
                      "cellId"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_vscode_command",
                  "description": "Run a command in VS Code. Use this tool to run a command in Visual Studio Code as part of a new workspace creation process only.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "commandId": {
                        "type": "string",
                        "description": "The ID of the command to execute. This should be in the format <command>."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the command to execute. This should be a clear and concise description of the command."
                      },
                      "args": {
                        "type": "array",
                        "description": "The arguments to pass to the command. This should be an array of strings.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "commandId",
                      "name"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "semantic_search",
                  "description": "Run a natural language search for relevant code or documentation comments from the user's current workspace. Returns relevant code snippets from the user's current workspace if it is large, or the full contents of the workspace if it is small.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to search the codebase for. Should contain all relevant context. Should ideally be text that might appear in the codebase, such as function names, variable names, or comments."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "test_failure",
                  "description": "Includes test failure information in the prompt."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "vscode_searchExtensions_internal",
                  "description": "This is a tool for browsing Visual Studio Code Extensions Marketplace. It allows the model to search for extensions and retrieve detailed information about them. The model should use this tool whenever it needs to discover extensions or resolve information about known ones. To use the tool, the model has to provide the category of the extensions, relevant search keywords, or known extension IDs. Note that search results may include false positives, so reviewing and filtering is recommended.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "description": "The category of extensions to search for",
                        "enum": [
                          "AI",
                          "Azure",
                          "Chat",
                          "Data Science",
                          "Debuggers",
                          "Extension Packs",
                          "Education",
                          "Formatters",
                          "Keymaps",
                          "Language Packs",
                          "Linters",
                          "Machine Learning",
                          "Notebooks",
                          "Programming Languages",
                          "SCM Providers",
                          "Snippets",
                          "Testing",
                          "Themes",
                          "Visualization",
                          "Other"
                        ]
                      },
                      "keywords": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The keywords to search for"
                      },
                      "ids": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The ids of the extensions to search for"
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_and_run_task",
                  "description": "Creates and runs a build, run, or custom task for the workspace by generating or adding to a tasks.json file based on the project structure (such as package.json or README.md). If the user asks to build, run, launch and they have no tasks.json file, use this tool. If they ask to create or add a task, use this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceFolder": {
                        "type": "string",
                        "description": "The absolute path of the workspace folder where the tasks.json file will be created."
                      },
                      "task": {
                        "type": "object",
                        "description": "The task to add to the new tasks.json file.",
                        "properties": {
                          "label": {
                            "type": "string",
                            "description": "The label of the task."
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the task. The only supported value is 'shell'.",
                            "enum": [
                              "shell"
                            ]
                          },
                          "command": {
                            "type": "string",
                            "description": "The shell command to run for the task. Use this to specify commands for building or running the application."
                          },
                          "args": {
                            "type": "array",
                            "description": "The arguments to pass to the command.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "isBackground": {
                            "type": "boolean",
                            "description": "Whether the task runs in the background without blocking the UI or other tasks. Set to true for long-running processes like watch tasks or servers that should continue executing without requiring user attention. When false, the task will block the terminal until completion."
                          },
                          "problemMatcher": {
                            "type": "array",
                            "description": "The problem matcher to use to parse task output for errors and warnings. Can be a predefined matcher like '$tsc' (TypeScript), '$eslint - stylish', '$gcc', etc., or a custom pattern defined in tasks.json. This helps VS Code display errors in the Problems panel and enables quick navigation to error locations.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "group": {
                            "type": "string",
                            "description": "The group to which the task belongs."
                          }
                        },
                        "required": [
                          "label",
                          "type",
                          "command"
                        ]
                      }
                    },
                    "required": [
                      "task",
                      "workspaceFolder"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_task_output",
                  "description": "Get the output of a task",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The task ID for which to get the output."
                      },
                      "workspaceFolder": {
                        "type": "string",
                        "description": "The workspace folder path containing the task"
                      }
                    },
                    "required": [
                      "id",
                      "workspaceFolder"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_terminal_output",
                  "description": "Get the output of a terminal command previously started with run_in_terminal",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the terminal to check."
                      }
                    },
                    "required": [
                      "id"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "manage_todo_list",
                  "description": "Manage a structured todo list to track progress and plan tasks throughout your coding session. Use this tool VERY frequently to ensure task visibility and proper planning.\n\nWhen to use this tool:\n- Complex multi-step work requiring planning and tracking\n- When user provides multiple tasks or requests (numbered/comma-separated)\n- After receiving new instructions that require multiple steps\n- BEFORE starting work on any todo (mark as in-progress)\n- IMMEDIATELY after completing each todo (mark completed individually)\n- When breaking down larger tasks into smaller actionable steps\n- To give users visibility into your progress and planning\n\nWhen NOT to use:\n- Single, trivial tasks that can be completed in one step\n- Purely conversational/informational requests\n- When just reading files or performing simple searches\n\nCRITICAL workflow:\n1. Plan tasks by writing todo list with specific, actionable items\n2. Mark ONE todo as in-progress before starting work\n3. Complete the work for that specific todo\n4. Mark that todo as completed IMMEDIATELY\n5. Move to next todo and repeat\n\nTodo states:\n- not-started: Todo not yet begun\n- in-progress: Currently working (limit ONE at a time)\n- completed: Finished successfully\n\nIMPORTANT: Mark todos completed as soon as they are done. Do not batch completions.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "todoList": {
                        "type": "array",
                        "description": "Complete array of all todo items (required for write operation, ignored for read). Must include ALL items - both existing and new.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number",
                              "description": "Unique identifier for the todo. Use sequential numbers starting from 1."
                            },
                            "title": {
                              "type": "string",
                              "description": "Concise action-oriented todo label (3-7 words). Displayed in UI."
                            },
                            "description": {
                              "type": "string",
                              "description": "Detailed context, requirements, or implementation notes. Include file paths, specific methods, or acceptance criteria."
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "not-started",
                                "in-progress",
                                "completed"
                              ],
                              "description": "not-started: Not begun | in-progress: Currently working (max 1) | completed: Fully finished with no blockers"
                            }
                          },
                          "required": [
                            "id",
                            "title",
                            "description",
                            "status"
                          ]
                        }
                      },
                      "operation": {
                        "type": "string",
                        "enum": [
                          "write",
                          "read"
                        ],
                        "description": "write: Replace entire todo list with new content. read: Retrieve current todo list. ALWAYS provide complete list when writing - partial updates not supported."
                      }
                    },
                    "required": [
                      "operation"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_in_terminal",
                  "description": "This tool allows you to execute PowerShell commands in a persistent terminal session, preserving environment variables, working directory, and other context across multiple commands.\n\nCommand Execution:\n- Use semicolons ; to chain commands on one line, NEVER use && even when asked explicitly\n- Prefer pipelines | for object-based data flow\n- Never create a sub-shell (eg. powershell -c \"command\") unless explicitly asked\n\nDirectory Management:\n- Must use absolute paths to avoid navigation issues\n- Use $PWD or Get-Location for current directory\n- Use Push-Location/Pop-Location for directory stack\n\nProgram Execution:\n- Supports .NET, Python, Node.js, and other executables\n- Install modules via Install-Module, Install-Package\n- Use Get-Command to verify cmdlet/function availability\n\nBackground Processes:\n- For long-running tasks (e.g., servers), set isBackground=true\n- Returns a terminal ID for checking status and runtime later\n- Use Start-Job for background PowerShell jobs\n\nOutput Management:\n- Output is automatically truncated if longer than 60KB to prevent context overflow\n- Use Select-Object, Where-Object, Format-Table to filter output\n- Use -First/-Last parameters to limit results\n- For pager commands, add | Out-String or | Format-List\n\nBest Practices:\n- Use proper cmdlet names instead of aliases in scripts\n- Quote paths with spaces: \"C:\\Path With Spaces\"\n- Prefer PowerShell cmdlets over external commands when available\n- Prefer idiomatic PowerShell like Get-ChildItem instead of dir or ls for file listings\n- Use Test-Path to check file/directory existence\n- Be specific with Select-Object properties to avoid excessive output",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "command": {
                        "type": "string",
                        "description": "The command to run in the terminal."
                      },
                      "explanation": {
                        "type": "string",
                        "description": "A one-sentence description of what the command does. This will be shown to the user before the command is run."
                      },
                      "isBackground": {
                        "type": "boolean",
                        "description": "Whether the command starts a background process. If true, the command will run in the background and you will not see the output. If false, the tool call will block on the command finishing, and then you will get the output. Examples of background processes: building in watch mode, starting a server. You can check the output of a background process later on by using get_terminal_output."
                      }
                    },
                    "required": [
                      "command",
                      "explanation",
                      "isBackground"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_task",
                  "description": "Runs a VS Code task.\n\n- If you see that an appropriate task exists for building or running code, prefer to use this tool to run the task instead of using the run_in_terminal tool.\n- Make sure that any appropriate build or watch task is running before trying to run tests or execute code.\n- If the user asks to run a task, use this tool to do so.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceFolder": {
                        "type": "string",
                        "description": "The workspace folder path containing the task"
                      },
                      "id": {
                        "type": "string",
                        "description": "The task ID to run."
                      }
                    },
                    "required": [
                      "workspaceFolder",
                      "id"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "runSubagent",
                  "description": "Launch a new agent to handle complex, multi-step tasks autonomously. This tool is good at researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries, use this agent to perform the search for you.\n\n- Agents do not run async or in the background, you will wait for the agent's result.\n- When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n - Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n - The agent's outputs should generally be trusted\n - Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "prompt": {
                        "type": "string",
                        "description": "A detailed description of the task for the agent to perform"
                      },
                      "description": {
                        "type": "string",
                        "description": "A short (3-5 word) description of the task"
                      }
                    },
                    "required": [
                      "prompt",
                      "description"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "runTests",
                  "description": "Runs unit tests in files. Use this tool if the user asks to run tests or when you want to validate changes using unit tests, and prefer using this tool instead of the terminal tool. When possible, always try to provide `files` paths containing the relevant unit tests in order to avoid unnecessarily long test runs. This tool outputs detailed information about the results of the test run. Set mode=\"coverage\" to also collect coverage and optionally provide coverageFiles for focused reporting.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Absolute paths to the test files to run. If not provided, all test files will be run."
                      },
                      "testNames": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "An array of test names to run. Depending on the context, test names defined in code may be strings or the names of functions or classes containing the test cases. If not provided, all tests in the files will be run."
                      },
                      "mode": {
                        "type": "string",
                        "enum": [
                          "run",
                          "coverage"
                        ],
                        "description": "Execution mode: \"run\" (default) runs tests normally, \"coverage\" collects coverage."
                      },
                      "coverageFiles": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "When mode=\"coverage\": absolute file paths to include detailed coverage info for. Only the first matching file will be summarized."
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "terminal_last_command",
                  "description": "Get the last command run in the active terminal."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "terminal_selection",
                  "description": "Get the current selection in the active terminal."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "notebook_install_packages",
                  "description": "Install a list of packages on a notebook kernel to be used within that notebook. This tool should be used when working with a jupyter notebook with python code cells. Do not use this tool if not already working with a notebook, or for a language other than python. If the tool configure_notebooks exists, then ensure to call configure_notebooks before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the notebook with the active kernel.",
                        "type": "string"
                      },
                      "packageList": {
                        "description": "A list of packages to install.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "filePath",
                      "packageList"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "notebook_list_packages",
                  "description": "List the installed packages that are currently available in the selected kernel for a notebook editor. This tool should be used when working with a jupyter notebook with python code cells. Do not use this tool if not already working with a notebook, or for a language other than python. If the tool configure_notebooks exists, then ensure to call configure_notebooks before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the notebook with the active kernel.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "filePath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_python_environment_details",
                  "description": "This tool will retrieve the details of the Python Environment for the specified file or workspace. The details returned include the 1. Type of Python Environment (conda, venv, etec), 2. Version of Python, 3. List of all installed Python packages with their versions. ALWAYS call configure_python_environment before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace to get the environment information for."
                      }
                    },
                    "required": []
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_python_executable_details",
                  "description": "This tool will retrieve the details of the Python Environment for the specified file or workspace. ALWAYS use this tool before executing any Python command in the terminal. This tool returns the details of how to construct the fully qualified path and or command including details such as arguments required to run Python in a terminal. Note: Instead of executing `python --version` or `python -c 'import sys; print(sys.executable)'`, use this tool to get the Python executable path to replace the `python` command. E.g. instead of using `python -c 'import sys; print(sys.executable)'`, use this tool to build the command `conda run -n <env_name> -c 'import sys; print(sys.executable)'`. ALWAYS call configure_python_environment before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace to get the executable information for. If not provided, the current workspace will be used. Where possible pass the path to the file or workspace."
                      }
                    },
                    "required": []
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "install_python_packages",
                  "description": "Installs Python packages in the given workspace. Use this tool to install Python packages in the user's chosen Python environment. ALWAYS call configure_python_environment before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "packageList": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The list of Python packages to install."
                      },
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace into which the packages are installed. If not provided, the current workspace will be used. Where possible pass the path to the file or workspace."
                      }
                    },
                    "required": [
                      "packageList"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "evaluateExpressionInDebugSession",
                  "description": "Evaluate an expression in a specific debug session",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "debugSessionId": {
                        "type": "number",
                        "description": "The ID of the debug session to evaluate the expression in"
                      },
                      "expression": {
                        "type": "string",
                        "description": "The expression to evaluate in the debug session"
                      }
                    },
                    "required": [
                      "debugSessionId",
                      "expression"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "listDebugSessions",
                  "description": "List all active debug sessions with their IDs, names, and expression language IDs",
                  "parameters": {
                    "type": "object",
                    "properties": {}
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_activePullRequest",
                  "description": "Get comprehensive information about the active GitHub pull request (PR). The active PR is the one that is currently checked out. This includes the PR title, full description, list of changed files, review comments, PR state, and status checks/CI results. For PRs created by Copilot, it also includes the session logs which indicate the development process and decisions made by the coding agent. When asked about the active or current pull request, do this first! Use this tool for any request related to \"current changes,\" \"pull request details,\" \"what changed,\" \"PR status,\" or similar queries even if the user does not explicitly mention \"pull request.\" When asked to use this tool, ALWAYS use it."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_copilot-coding-agent",
                  "description": "Completes the provided task using an asynchronous coding agent. Use when the user wants copilot continue completing a task in the background or asynchronously. IMPORTANT: Use this tool LAST/FINAL when users mention '#github-pull-request_copilot-coding-agent' in their query. This indicates they want the task/job implemented by the remote coding agent after all other analysis, planning, and preparation is complete. Call this tool at the END to hand off the fully-scoped task to the asynchronous GitHub Copilot coding agent. The agent will create a new branch, implement the changes, and open a pull request. Always use this tool as the final step when the hashtag is mentioned, after completing any other necessary tools or analysis first.",
                  "parameters": {
                    "type": "object",
                    "required": [
                      "title",
                      "body"
                    ],
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "The title of the issue. Populate from chat context."
                      },
                      "body": {
                        "type": "string",
                        "description": "The body/description of the issue. Populate from chat context."
                      },
                      "existingPullRequest": {
                        "type": "number",
                        "description": "The number of an existing pull request related to the current coding agent task. Look in the chat history for this number.  In the chat it may look like 'Coding agent will continue work in #17...'. In this example, you should return '17'."
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_doSearch",
                  "description": "Execute a GitHub search given a well formed GitHub search query. Call github-pull-request_formSearchQuery first to get good search syntax and pass the exact result in as the 'query'.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "query": {
                        "type": "string",
                        "description": "A well formed GitHub search query using proper GitHub search syntax."
                      }
                    },
                    "required": [
                      "query",
                      "repo"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_formSearchQuery",
                  "description": "Converts natural language to a GitHub search query. Should ALWAYS be called before doing a search.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "naturalLanguageString": {
                        "type": "string",
                        "description": "A plain text description of what the search should be."
                      }
                    },
                    "required": [
                      "naturalLanguageString"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_issue_fetch",
                  "description": "Get a GitHub issue/PR's details as a JSON object.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue/PR from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue/PR from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue/PR from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "issueNumber": {
                        "type": "number",
                        "description": "The number of the issue/PR to get."
                      }
                    },
                    "required": [
                      "issueNumber"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_openPullRequest",
                  "description": "Get comprehensive information about the GitHub pull request (PR) which is currently visible, but not necessarily checked out. This includes the PR title, full description, list of changed files, review comments, PR state, and status checks/CI results. For PRs created by Copilot, it also includes the session logs which indicate the development process and decisions made by the coding agent. When asked about the currently open pull request, do this first! Use this tool for any request related to \"pull request details,\" \"what changed,\" \"PR status,\" or similar queries even if the user does not explicitly mention \"pull request.\" When asked to use this tool, ALWAYS use it."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_renderIssues",
                  "description": "Render issue items from an issue search in a markdown table. The markdown table will be displayed directly to the user by the tool. No further display should be done after this!",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "arrayOfIssues": {
                        "type": "array",
                        "description": "An array of GitHub Issues.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "The title of the issue."
                            },
                            "number": {
                              "type": "number",
                              "description": "The number of the issue."
                            },
                            "url": {
                              "type": "string",
                              "description": "The URL of the issue."
                            },
                            "state": {
                              "type": "string",
                              "description": "The state of the issue (open/closed)."
                            },
                            "createdAt": {
                              "type": "string",
                              "description": "The creation date of the issue."
                            },
                            "updatedAt": {
                              "type": "string",
                              "description": "The last update date of the issue."
                            },
                            "closedAt": {
                              "type": "string",
                              "description": "The closing date of the issue."
                            },
                            "author": {
                              "type": "object",
                              "description": "The author of the issue.",
                              "properties": {
                                "login": {
                                  "type": "string",
                                  "description": "The login of the author."
                                },
                                "url": {
                                  "type": "string",
                                  "description": "The URL of the author's profile."
                                }
                              }
                            },
                            "labels": {
                              "type": "array",
                              "description": "The labels associated with the issue.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the label."
                                  },
                                  "color": {
                                    "type": "string",
                                    "description": "The color of the label."
                                  }
                                }
                              }
                            },
                            "assignees": {
                              "type": "array",
                              "description": "The assignees of the issue.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "login": {
                                    "type": "string",
                                    "description": "The login of the assignee."
                                  },
                                  "url": {
                                    "type": "string",
                                    "description": "The URL of the assignee's profile."
                                  }
                                }
                              }
                            },
                            "commentsCount": {
                              "type": "number",
                              "description": "The number of comments on the issue."
                            }
                          },
                          "required": [
                            "title",
                            "number",
                            "url",
                            "state",
                            "createdAt",
                            "author"
                          ]
                        }
                      },
                      "totalIssues": {
                        "type": "number",
                        "description": "The total number of issues in the search."
                      }
                    },
                    "required": [
                      "arrayOfIssues",
                      "totalIssues"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_suggest-fix",
                  "description": "Summarize and suggest a fix for a GitHub issue.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "issueNumber": {
                        "type": "number",
                        "description": "The number of the issue to get."
                      }
                    },
                    "required": [
                      "issueNumber",
                      "repo"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "kustoSchema",
                  "description": "Returns the Schema of a Kusto Database (including table, column, function names and more). Always use this tool when generating Kusto KQL queries without making assumptions about the available tables, columns and functions."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceInstalledTopLevelModules",
                  "description": "Get available top-level modules from installed Python packages in environment. Shows what can be imported. Use for: checking if packages are installed, verifying import availability, helping users understand available modules.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "pythonEnvironment": {
                        "type": "string",
                        "description": "The Python environment to use. Must be a value returned by the pylancePythonEnvironments tool. If pythonEnvironment is missing, the python environment of the workspace will be used."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceInvokeRefactoring",
                  "description": "Apply automated code refactoring to Python files. Returns refactored content (does not modify original file) unless mode is \"update\". Use for: extracting functions, organizing imports, improving code structure, applying refactoring patterns.  Optional \"mode\" parameter: \"update\" updates the file, \"edits\" returns a WorkspaceEdit, \"string\" returns updated content as string. If mode is not specified, \"update\" will be used as the default. The \"edits\" mode is helpful for determining if a file needs changes (for example, to remove unused imports or fix import formatting) without making any modifications; if no changes are needed, the result will be either an empty WorkspaceEdit or a message indicating that no text edits were found. Available refactorings: source.unusedImports: - Removes all unused import statements from a Python file. Use when imports are imported but never referenced in the code. Requires fileUri parameter pointing to a Python file with unused imports.\nsource.convertImportFormat: - Converts import statements between absolute and relative formats according to python.analysis.importFormat setting. Use when import format consistency is needed. Requires fileUri parameter pointing to a Python file with imports to convert.\nsource.fixAll.pylance: - Applies all available automatic code fixes from python.analysis.fixAll setting. Use when multiple code issues need to be addressed simultaneously. Requires fileUri parameter pointing to a Python file with fixable issues.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "fileUri": {
                        "type": "string",
                        "description": "The uri of the file to invoke the refactoring."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the refactoring to invoke. This must be one of these [source.unusedImports, source.convertImportFormat, source.fixAll.pylance]"
                      },
                      "mode": {
                        "type": "string",
                        "enum": [
                          "update",
                          "edits",
                          "string"
                        ],
                        "description": "Determines the output mode: \"update\" updates the file directly, \"edits\" returns a WorkspaceEdit, \"string\" returns the updated content as a string. If omitted, \"update\" will be used as the default. The \"edits\" mode is especially useful for checking if any changes are needed (such as unused imports or import formatting issues) without modifying the file, as it will return a WorkspaceEdit only if edits are required."
                      }
                    },
                    "required": [
                      "fileUri",
                      "name"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylancePythonEnvironments",
                  "description": "Get Python environment information for workspace: current active environment and all available environments. Use for: Python environment issues, switching environments, understanding Python setup.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceSettings",
                  "description": "Get current Python analysis settings and configuration for a workspace. Returns all \"python.analysis.*\" settings with default vs user-configured indicators. Use for: troubleshooting configuration, checking current settings, diagnosing analysis issues.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceUpdatePythonEnvironment",
                  "description": "Switch active Python environment for workspace to different Python installation or virtual environment. Updates settings and ensures subsequent operations use new environment. Use for: changing Python versions, switching to virtual environments, resolving environment issues.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "pythonEnvironment": {
                        "type": "string",
                        "description": "The Python environment to use. Must be either a value returned by the pylancePythonEnvironments tool or the absolute path to a Python executable."
                      }
                    },
                    "required": [
                      "workspaceRoot",
                      "pythonEnvironment"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              }
            ]
          },
          "requestMessages": {
            "messages": [
              {
                "role": 0,
                "content": [
                  {
                    "type": 1,
                    "text": "You are an expert AI programming assistant, working with a user in the VS Code editor.\nWhen asked for your name, you must respond with \"GitHub Copilot\". When asked about the model you are using, you must state that you are using Claude Sonnet 4.\nFollow the user's requirements carefully & to the letter.\nFollow Microsoft content policies.\nAvoid content that violates copyrights.\nIf you are asked to generate content that is harmful, hateful, racist, sexist, lewd, or violent, only respond with \"Sorry, I can't assist with that.\"\nKeep your answers short and impersonal.\n<instructions>\nYou are a highly sophisticated automated coding agent with expert-level knowledge across many different programming languages and frameworks.\nThe user will ask a question, or ask you to perform a task, and it may require lots of research to answer correctly. There is a selection of tools that let you perform actions or retrieve helpful context to answer the user's question.\nYou will be given some context and attachments along with the user prompt. You can use them if they are relevant to the task, and ignore them if not. Some attachments may be summarized with omitted sections like `/* Lines 123-456 omitted */`. You can use the read_file tool to read more context if needed. Never pass this omitted line marker to an edit tool.\nIf you can infer the project type (languages, frameworks, and libraries) from the user's query or the context that you have, make sure to keep them in mind when making changes.\nIf the user wants you to implement a feature and they have not specified the files to edit, first break down the user's request into smaller concepts and think about the kinds of files you need to grasp each concept.\nIf you aren't sure which tool is relevant, you can call multiple tools. You can call tools repeatedly to take actions or gather as much context as needed until you have completed the task fully. Don't give up unless you are sure the request cannot be fulfilled with the tools you have. It's YOUR RESPONSIBILITY to make sure that you have done all you can to collect necessary context.\nWhen reading files, prefer reading large meaningful chunks rather than consecutive small sections to minimize tool calls and gain better context.\nDon't make assumptions about the situation- gather context first, then perform the task or answer the question.\nThink creatively and explore the workspace in order to make a complete fix.\nDon't repeat yourself after a tool call, pick up where you left off.\nNEVER print out a codeblock with file changes unless the user asked for it. Use the appropriate edit tool instead.\nNEVER print out a codeblock with a terminal command to run unless the user asked for it. Use the run_in_terminal tool instead.\nYou don't need to read a file if it's already provided in context.\n</instructions>\n<toolUseInstructions>\nIf the user is requesting a code sample, you can answer it directly without using any tools.\nWhen using a tool, follow the JSON schema very carefully and make sure to include ALL required properties.\nNo need to ask permission before using a tool.\nNEVER say the name of a tool to a user. For example, instead of saying that you'll use the run_in_terminal tool, say \"I'll run the command in a terminal\".\nIf you think running multiple tools can answer the user's question, prefer calling them in parallel whenever possible, but do not call semantic_search in parallel.\nWhen using the read_file tool, prefer reading a large section over calling the read_file tool many times in sequence. You can also think of all the pieces you may be interested in and read them in parallel. Read large enough context to ensure you get what you need.\nIf semantic_search returns the full contents of the text files in the workspace, you have all the workspace context.\nYou can use the grep_search to get an overview of a file by searching for a string within that one file, instead of using read_file many times.\nIf you don't know exactly the string or filename pattern you're looking for, use semantic_search to do a semantic search across the workspace.\nDon't call the run_in_terminal tool multiple times in parallel. Instead, run one command and wait for the output before running the next command.\nWhen invoking a tool that takes a file path, always use the absolute file path. If the file has a scheme like untitled: or vscode-userdata:, then use a URI with the scheme.\nNEVER try to edit a file by running terminal commands unless the user specifically asks for it.\nTools can be disabled by the user. You may see tools used previously in the conversation that are not currently available. Be careful to only use the tools that are currently available to you.\n</toolUseInstructions>\n<notebookInstructions>\nTo edit notebook files in the workspace, you can use the edit_notebook_file tool.\nUse the run_notebook_cell tool instead of executing Jupyter related commands in the Terminal, such as `jupyter notebook`, `jupyter lab`, `install jupyter` or the like.\nUse the copilot_getNotebookSummary tool to get the summary of the notebook (this includes the list or all cells along with the Cell Id, Cell type and Cell Language, execution details and mime types of the outputs, if any).\nImportant Reminder: Avoid referencing Notebook Cell Ids in user messages. Use cell number instead.\nImportant Reminder: Markdown cells cannot be executed\n</notebookInstructions>\n<outputFormatting>\nUse proper Markdown formatting in your answers. When referring to a filename or symbol in the user's workspace, wrap it in backticks.\n<example>\nThe class `Person` is in `src/models/person.ts`.\nThe function `calculateTotal` is defined in `lib/utils/math.ts`.\nYou can find the configuration in `config/app.config.json`.\n</example>\nUse KaTeX for math equations in your answers.\nWrap inline math equations in $.\nWrap more complex blocks of math equations in $$.\n\n</outputFormatting>\n\n<instructions>\nHere is a list of instruction files that contain rules for modifying or creating new code.\nThese files are important for ensuring that the code is modified or created correctly.\nPlease make sure to follow the rules specified in these files when working with the codebase.\nIf the file is not already available as attachment, use the `read_file` tool to acquire it.\nMake sure to acquire the instructions before making any changes to the code.\n| File | Applies To | Description |\n| ------- | --------- | ----------- |\n| 'vscode-userdata:/c%3A/Users/aaron/AppData/Roaming/Code%20-%20Insiders/User/prompts/general.instructions.md' | **/* |  |\n</instructions>\n"
                  },
                  {
                    "type": 3,
                    "cacheType": "ephemeral"
                  }
                ]
              },
              {
                "role": 1,
                "content": [
                  {
                    "type": 1,
                    "text": "<environment_info>\nThe user's current OS is: Windows\nThe user's default shell is: \"pwsh.exe\". When you generate terminal commands, please generate them correctly for this shell.\n</environment_info>\n<workspace_info>\nThe following tasks can be executed using the run_task tool if they are not already running:\n<workspaceFolder path=\"c:\\\\src\\\\test\\\\ws2\">\n<task id=\"shell: echo\">\n{\n\t\"label\": \"echo\",\n\t\"type\": \"shell\",\n\t\"command\": \"echo Hello\"\n}\n</task>\n<task id=\"shell: getFile\">\n{\n\t\"label\": \"getFile\",\n\t\"type\": \"shell\",\n\t\"isBackground\": false,\n\t\"command\": \"cat ./file.txt\"\n}\n</task>\n\n</workspaceFolder>\nI am working in a workspace with the following folders:\n- c:\\src\\test\\ws2 \nI am working in a workspace that has the following structure:\n```\n1.ipynb\n1.py\n1.txt\n4.ipynb\nChipotle.solution.ipynb\ndataFrames.py\nexported.ipynb\nhello_world.ipynb\nhello.ipynb\nInteractive-1.ipynb\niris_analysis.ipynb\nmyLib.py\nnotebook.ipynb\nsample.csv\nsaved.ipynb\nscript.py\nscriptFun.py\ntest.md\nthis.txt\nunnecessaryEdit.txt\nUntitled-1.ipynb\nUntitled-2.ipynb\nUntitled-3.ipynb\nvars.ipynb\nvars.py\nzzz.ipynb\nzzz1.ipynb\nzzz2.ipynb\nzzzz.ipynb\n__pycache__/\ndirA/\n\ttest.ipynb\ndirB/\n```\nThis is the state of the context at this point in the conversation. The view of the workspace structure may be truncated. You can use tools to collect more context if needed.\n</workspace_info>\n"
                  },
                  {
                    "type": 3,
                    "cacheType": "ephemeral"
                  }
                ]
              },
              {
                "role": 1,
                "content": [
                  {
                    "type": 1,
                    "text": "<context>\nThe current date is October 31, 2025.\nTerminals:\nTerminal: pwsh\n\n</context>\n<reminderInstructions>\nWhen using the replace_string_in_file tool, include 3-5 lines of unchanged code before and after the string you want to replace, to make it unambiguous which part of the file should be edited.\nFor maximum efficiency, whenever you plan to perform multiple independent edit operations, invoke them simultaneously using multi_replace_string_in_file tool rather than sequentially. This will greatly improve user's cost and time efficiency leading to a better user experience. Do not announce which tool you're using (for example, avoid saying \"I'll implement all the changes using multi_replace_string_in_file\").\n\n</reminderInstructions>\n<userRequest>\ncreate a file that says \n\"hello\"\n</userRequest>\n"
                  },
                  {
                    "type": 3,
                    "cacheType": "ephemeral"
                  }
                ]
              }
            ]
          },
          "response": {
            "type": "success",
            "message": [
              "I'll create a simple file that says \"hello\" for you. "
            ]
          }
        }
      ]
    },
    {
      "prompt": "create a file that says \n\"hello\"",
      "hasSeen": true,
      "logCount": 3,
      "logs": [
        {
          "id": "da52f96d",
          "kind": "element",
          "name": "Gh",
          "tokens": 2082,
          "maxTokens": 99003
        },
        {
          "id": "toolu_vrtx_01NGpatVG4s9Bozweeox7g5T__vscode-1761926668997",
          "kind": "toolCall",
          "tool": "create_file",
          "args": "{\"filePath\": \"c:\\\\src\\\\test\\\\ws2\\\\hello.txt\", \"content\": \"hello\"}",
          "time": "2025-10-31T16:04:53.434Z",
          "response": [
            "The following files were successfully edited:\nc:\\src\\test\\ws2\\hello.txt\n"
          ]
        },
        {
          "id": "20c10509",
          "kind": "request",
          "type": "ChatMLSuccess",
          "name": "panel/editAgent",
          "metadata": {
            "requestType": "ChatCompletions",
            "model": "claude-sonnet-4",
            "maxPromptTokens": 127997,
            "maxResponseTokens": 16000,
            "location": 7,
            "postOptions": {
              "temperature": 0,
              "top_p": 1,
              "max_tokens": 16000,
              "n": 1,
              "stream": true
            },
            "startTime": "2025-10-31T16:04:53.438Z",
            "endTime": "2025-10-31T16:04:55.504Z",
            "duration": 2066,
            "ourRequestId": "89e1714e-65d5-4b11-a0a7-8b2eaf7943ce",
            "requestId": "89e1714e-65d5-4b11-a0a7-8b2eaf7943ce",
            "serverRequestId": "89e1714e-65d5-4b11-a0a7-8b2eaf7943ce",
            "timeToFirstToken": 1559,
            "usage": {
              "completion_tokens": 24,
              "prompt_tokens": 18212,
              "prompt_tokens_details": {
                "cached_tokens": 17278
              },
              "total_tokens": 18236
            },
            "tools": [
              {
                "function": {
                  "name": "logpoint_generator_add_logpoint",
                  "description": "Create a debugger log point that will print a log to the debug panel with the provided message when the debugger reaches that point. The message can be interpolated with variables from the debugger by surrounding with {}.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the file to read.",
                        "type": "string"
                      },
                      "lineNumber": {
                        "description": "The 1-based line number on which to add the log point. The line should contain executable code and needs to be after any variable referenced in the log message",
                        "type": "number"
                      },
                      "logMessage": {
                        "type": "string",
                        "description": "The message that will print in the debug panel. Debugger variables can be interpolated by surrounding the variable name with {}. The variables need to have already been assigned and exist in scope as the code on the target line."
                      }
                    },
                    "required": [
                      "filePath",
                      "lineNumber",
                      "logMessage"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceRunCodeSnippet",
                  "description": "Execute Python code snippets directly in the workspace environment. PREFERRED over terminal commands for running Python code. This tool automatically uses the correct Python interpreter configured for the workspace, eliminates shell escaping/quoting problems that plague terminal execution, and provides clean, properly formatted output with stdout/stderr correctly interleaved. Use this instead of `python -c \"code\"` or terminal commands when running Python snippets. Ideal for: testing code, running quick scripts, validating Python expressions, checking imports, and any Python execution within the workspace context. No temporary files needed - code runs directly in memory.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "codeSnippet": {
                        "type": "string",
                        "description": "The code snippet to run."
                      },
                      "workingDirectory": {
                        "type": "string",
                        "description": "The working directory to use for the code snippet. If the code snippet is pulled from a file, this should be the directory for the file. Especially if the snippet has imports."
                      },
                      "timeout": {
                        "type": "number",
                        "minimum": 0,
                        "description": "The timeout for the code snippet execution."
                      }
                    },
                    "required": [
                      "workspaceRoot",
                      "codeSnippet"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "configure_notebook",
                  "description": "Tool used to configure a Notebook. ALWAYS use this tool before running/executing any Notebook Cells for the first time or before listing/installing packages in Notebooks for the first time. I.e. there is no need to use this tool more than once for the same notebook.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the notebook with the active kernel.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "filePath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceFileSyntaxErrors",
                  "description": "Check Python file for syntax errors. Returns detailed error list with line numbers, messages, and error types. Use when: users report syntax problems, validating files before processing, debugging parse errors.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "fileUri": {
                        "type": "string",
                        "description": "The uri of the file to check for syntax errors. Must be a user file in the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot",
                      "fileUri"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceDocuments",
                  "description": "Search Pylance documentation for Python language server help, configuration guidance, feature explanations, and troubleshooting. Returns comprehensive answers about Pylance settings, capabilities, and usage. Use when users ask: How to configure Pylance? What features are available? How to fix Pylance issues?",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "search": {
                        "type": "string",
                        "description": "Detailed question in natural language. Think of it as a prompt for an LLM. Do not use keyword search terms."
                      }
                    },
                    "required": [
                      "search"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "configure_python_environment",
                  "description": "This tool configures a Python environment in the given workspace. ALWAYS Use this tool to set up the user's chosen environment and ALWAYS call this tool before using any other Python related tools or running any Python command in the terminal.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace for which a Python Environment needs to be configured."
                      }
                    },
                    "required": []
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceWorkspaceRoots",
                  "description": "Get workspace root directories. Returns workspace root for specific file or all workspace roots if no file provided. Use for: understanding workspace structure, getting paths for other operations.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "fileUri": {
                        "type": "string",
                        "description": "The uri of the file to check its workspace"
                      }
                    },
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceSyntaxErrors",
                  "description": "Validate Python code snippets for syntax errors without saving to file. Returns syntax error details with line numbers and descriptions. Use for: validating generated code, checking user code snippets, pre-execution validation.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The Python code to check for syntax errors."
                      },
                      "pythonVersion": {
                        "type": "string",
                        "description": "The version of Python to use for the syntax check. Must be a valid Python version string. ex) \"3.10\" or \"3.11.4\"."
                      }
                    },
                    "required": [
                      "code",
                      "pythonVersion"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceWorkspaceUserFiles",
                  "description": "Get list of all user Python files in workspace (excludes library/dependency files). Respects python.analysis.include/exclude settings. Use for: analyzing user code, searching project files, operating on user-created Python files.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceImports",
                  "description": "Analyze imports across workspace user files. Returns all top-level module names imported, including resolved and unresolved imports. Use for: finding missing dependencies, understanding project dependencies, analyzing import patterns.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_directory",
                  "description": "Create a new directory structure in the workspace. Will recursively create all directories in the path, like mkdir -p. You do not need to use this tool before using create_file, that tool will automatically create the needed directories.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "dirPath": {
                        "type": "string",
                        "description": "The absolute path to the directory to create."
                      }
                    },
                    "required": [
                      "dirPath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_file",
                  "description": "This is a tool for creating a new file in the workspace. The file will be created with the specified content. The directory will be created if it does not already exist. Never use this tool to edit a file that already exists.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "The absolute path to the file to create."
                      },
                      "content": {
                        "type": "string",
                        "description": "The content to write to the file."
                      }
                    },
                    "required": [
                      "filePath",
                      "content"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_new_jupyter_notebook",
                  "description": "Generates a new Jupyter Notebook (.ipynb) in VS Code. Jupyter Notebooks are interactive documents commonly used for data exploration, analysis, visualization, and combining code with narrative text. Prefer creating plain Python files or similar unless a user explicitly requests creating a new Jupyter Notebook or already has a Jupyter Notebook opened or exists in the workspace.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to use to generate the jupyter notebook. This should be a clear and concise description of the notebook the user wants to create."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_new_workspace",
                  "description": "Get comprehensive setup steps to help the user create complete project structures in a VS Code workspace. This tool is designed for full project initialization and scaffolding, not for creating individual files.\n\nWhen to use this tool:\n- User wants to create a new complete project from scratch\n- Setting up entire project frameworks (TypeScript projects, React apps, Node.js servers, etc.)\n- Initializing Model Context Protocol (MCP) servers with full structure\n- Creating VS Code extensions with proper scaffolding\n- Setting up Next.js, Vite, or other framework-based projects\n- User asks for \"new project\", \"create a workspace\", \"set up a [framework] project\"\n- Need to establish complete development environment with dependencies, config files, and folder structure\n\nWhen NOT to use this tool:\n- Creating single files or small code snippets\n- Adding individual files to existing projects\n- Making modifications to existing codebases\n- User asks to \"create a file\" or \"add a component\"\n- Simple code examples or demonstrations\n- Debugging or fixing existing code\n\nThis tool provides complete project setup including:\n- Folder structure creation\n- Package.json and dependency management\n- Configuration files (tsconfig, eslint, etc.)\n- Initial boilerplate code\n- Development environment setup\n- Build and run instructions\n\nUse other file creation tools for individual files within existing projects.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to use to generate the new workspace. This should be a clear and concise description of the workspace the user wants to create."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "edit_notebook_file",
                  "description": "This is a tool for editing an existing Notebook file in the workspace. Generate the \"explanation\" property first.\nThe system is very smart and can understand how to apply your edits to the notebooks.\nWhen updating the content of an existing cell, ensure newCode preserves whitespace and indentation exactly and does NOT include any code markers such as (...existing code...).",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file to edit, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1."
                      },
                      "cellId": {
                        "type": "string",
                        "description": "Id of the cell that needs to be deleted or edited. Use the value `TOP`, `BOTTOM` when inserting a cell at the top or bottom of the notebook, else provide the id of the cell after which a new cell is to be inserted. Remember, if a cellId is provided and editType=insert, then a cell will be inserted after the cell with the provided cellId."
                      },
                      "newCode": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "The code for the new or existing cell to be edited. Code should not be wrapped within <VSCode.Cell> tags. Do NOT include code markers such as (...existing code...) to indicate existing code."
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "The code for the new or existing cell to be edited. Code should not be wrapped within <VSCode.Cell> tags"
                            }
                          }
                        ]
                      },
                      "language": {
                        "type": "string",
                        "description": "The language of the cell. `markdown`, `python`, `javascript`, `julia`, etc."
                      },
                      "editType": {
                        "type": "string",
                        "enum": [
                          "insert",
                          "delete",
                          "edit"
                        ],
                        "description": "The operation peformed on the cell, whether `insert`, `delete` or `edit`.\nUse the `editType` field to specify the operation: `insert` to add a new cell, `edit` to modify an existing cell's content, and `delete` to remove a cell."
                      }
                    },
                    "required": [
                      "filePath",
                      "editType",
                      "cellId"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "fetch_webpage",
                  "description": "Fetches the main content from a web page. This tool is useful for summarizing or analyzing the content of a webpage. You should use this tool when you think the user is looking for information from a specific webpage.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "urls": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "An array of URLs to fetch content from."
                      },
                      "query": {
                        "type": "string",
                        "description": "The query to search for in the web page's content. This should be a clear and concise description of the content you want to find."
                      }
                    },
                    "required": [
                      "urls",
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "file_search",
                  "description": "Search for files in the workspace by glob pattern. This only returns the paths of matching files. Use this tool when you know the exact filename pattern of the files you're searching for. Glob patterns match from the root of the workspace folder. Examples:\n- **/*.{js,ts} to match all js/ts files in the workspace.\n- src/** to match all files under the top-level src folder.\n- **/foo/**/*.js to match all js files under any foo folder in the workspace.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "Search for files with names or paths matching this glob pattern."
                      },
                      "maxResults": {
                        "type": "number",
                        "description": "The maximum number of results to return. Do not use this unless necessary, it can slow things down. By default, only some matches are returned. If you use this and don't see what you're looking for, you can try again with a more specific query or a larger maxResults."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "grep_search",
                  "description": "Do a fast text search in the workspace. Use this tool when you want to search with an exact string or regex. If you are not sure what words will appear in the workspace, prefer using regex patterns with alternation (|) or character classes to search for multiple potential words at once instead of making separate searches. For example, use 'function|method|procedure' to look for all of those words at once. Use includePattern to search within files matching a specific pattern, or in a specific file, using a relative path. Use this tool when you want to see an overview of a particular file, instead of using read_file many times to look for code within a file.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The pattern to search for in files in the workspace. Use regex with alternation (e.g., 'word1|word2|word3') or character classes to find multiple potential words in a single search. Be sure to set the isRegexp property properly to declare whether it's a regex or plain text pattern. Is case-insensitive."
                      },
                      "isRegexp": {
                        "type": "boolean",
                        "description": "Whether the pattern is a regex."
                      },
                      "includePattern": {
                        "type": "string",
                        "description": "Search files matching this glob pattern. Will be applied to the relative path of files within the workspace. To search recursively inside a folder, use a proper glob pattern like \"src/folder/**\". Do not use | in includePattern."
                      },
                      "maxResults": {
                        "type": "number",
                        "description": "The maximum number of results to return. Do not use this unless necessary, it can slow things down. By default, only some matches are returned. If you use this and don't see what you're looking for, you can try again with a more specific query or a larger maxResults."
                      }
                    },
                    "required": [
                      "query",
                      "isRegexp"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_changed_files",
                  "description": "Get git diffs of current file changes in a git repository. Don't forget that you can use run_in_terminal to run git commands in a terminal as well.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repositoryPath": {
                        "type": "string",
                        "description": "The absolute path to the git repository to look for changes in. If not provided, the active git repository will be used."
                      },
                      "sourceControlState": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "staged",
                            "unstaged",
                            "merge-conflicts"
                          ]
                        },
                        "description": "The kinds of git state to filter by. Allowed values are: 'staged', 'unstaged', and 'merge-conflicts'. If not provided, all states will be included."
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_errors",
                  "description": "Get any compile or lint errors in a specific file or across all files. If the user mentions errors or problems in a file, they may be referring to these. Use the tool to see the same errors that the user is seeing. If the user asks you to analyze all errors, or does not specify a file, use this tool to gather errors for all files. Also use this tool after editing a file to validate the change.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePaths": {
                        "description": "The absolute paths to the files or folders to check for errors. Omit 'filePaths' when retrieving all errors.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "copilot_getNotebookSummary",
                  "description": "This is a tool returns the list of the Notebook cells along with the id, cell types, line ranges, language, execution information and output mime types for each cell. This is useful to get Cell Ids when executing a notebook or determine what cells have been executed and what order, or what cells have outputs. If required to read contents of a cell use this to determine the line range of a cells, and then use read_file tool to read a specific line range. Requery this tool if the contents of the notebook change.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb"
                      }
                    },
                    "required": [
                      "filePath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_project_setup_info",
                  "description": "Do not call this tool without first calling the tool to create a workspace. This tool provides a project setup information for a Visual Studio Code workspace based on a project type and programming language.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "projectType": {
                        "type": "string",
                        "description": "The type of project to create. Supported values are: 'python-script', 'python-project', 'mcp-server', 'model-context-protocol-server', 'vscode-extension', 'next-js', 'vite' and 'other'"
                      }
                    },
                    "required": [
                      "projectType"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_search_view_results",
                  "description": "The results from the search view"
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_vscode_api",
                  "description": "Get comprehensive VS Code API documentation and references for extension development. This tool provides authoritative documentation for VS Code's extensive API surface, including proposed APIs, contribution points, and best practices. Use this tool for understanding complex VS Code API interactions.\n\nWhen to use this tool:\n- User asks about specific VS Code APIs, interfaces, or extension capabilities\n- Need documentation for VS Code extension contribution points (commands, views, settings, etc.)\n- Questions about proposed APIs and their usage patterns\n- Understanding VS Code extension lifecycle, activation events, and packaging\n- Best practices for VS Code extension development architecture\n- API examples and code patterns for extension features\n- Troubleshooting extension-specific issues or API limitations\n\nWhen NOT to use this tool:\n- Creating simple standalone files or scripts unrelated to VS Code extensions\n- General programming questions not specific to VS Code extension development\n- Questions about using VS Code as an editor (user-facing features)\n- Non-extension related development tasks\n- File creation or editing that doesn't involve VS Code extension APIs\n\nCRITICAL usage guidelines:\n1. Always include specific API names, interfaces, or concepts in your query\n2. Mention the extension feature you're trying to implement\n3. Include context about proposed vs stable APIs when relevant\n4. Reference specific contribution points when asking about extension manifest\n5. Be specific about the VS Code version or API version when known\n\nScope: This tool is for EXTENSION DEVELOPMENT ONLY - building tools that extend VS Code itself, not for general file creation or non-extension programming tasks.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to search vscode documentation for. Should contain all relevant context."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github_repo",
                  "description": "Searches a GitHub repository for relevant source code snippets. Only use this tool if the user is very clearly asking for code snippets from a specific GitHub repository. Do not use this tool for Github repos that the user has open in their workspace.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "string",
                        "description": "The name of the Github repository to search for code in. Should must be formatted as '<owner>/<repo>'."
                      },
                      "query": {
                        "type": "string",
                        "description": "The query to search for repo. Should contain all relevant context."
                      }
                    },
                    "required": [
                      "repo",
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "install_extension",
                  "description": "Install an extension in VS Code. Use this tool to install an extension in Visual Studio Code as part of a new workspace creation process only.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the extension to install. This should be in the format <publisher>.<extension>."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the extension to install. This should be a clear and concise description of the extension."
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "list_code_usages",
                  "description": "Request to list all usages (references, definitions, implementations etc) of a function, class, method, variable etc. Use this tool when \n1. Looking for a sample implementation of an interface or class\n2. Checking how a function is used throughout the codebase.\n3. Including and updating all usages when changing a function, method, or constructor",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "symbolName": {
                        "type": "string",
                        "description": "The name of the symbol, such as a function name, class name, method name, variable name, etc."
                      },
                      "filePaths": {
                        "type": "array",
                        "description": "One or more file paths which likely contain the definition of the symbol. For instance the file which declares a class or function. This is optional but will speed up the invocation of this tool and improve the quality of its output.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "symbolName"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "list_dir",
                  "description": "List the contents of a directory. Result will have the name of the child. If the name ends in /, it's a folder, otherwise a file",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "description": "The absolute path to the directory to list."
                      }
                    },
                    "required": [
                      "path"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "multi_replace_string_in_file",
                  "description": "This tool allows you to apply multiple replace_string_in_file operations in a single call, which is more efficient than calling replace_string_in_file multiple times. It takes an array of replacement operations and applies them sequentially. Each replacement operation has the same parameters as replace_string_in_file: filePath, oldString, newString, and explanation. This tool is ideal when you need to make multiple edits across different files or multiple edits in the same file. The tool will provide a summary of successful and failed operations.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "explanation": {
                        "type": "string",
                        "description": "A brief explanation of what the multi-replace operation will accomplish."
                      },
                      "replacements": {
                        "type": "array",
                        "description": "An array of replacement operations to apply sequentially.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "explanation": {
                              "type": "string",
                              "description": "A brief explanation of this specific replacement operation."
                            },
                            "filePath": {
                              "type": "string",
                              "description": "An absolute path to the file to edit."
                            },
                            "oldString": {
                              "type": "string",
                              "description": "The exact literal text to replace, preferably unescaped. Include at least 3 lines of context BEFORE and AFTER the target text, matching whitespace and indentation precisely. If this string is not the exact literal text or does not match exactly, this replacement will fail."
                            },
                            "newString": {
                              "type": "string",
                              "description": "The exact literal text to replace `oldString` with, preferably unescaped. Provide the EXACT text. Ensure the resulting code is correct and idiomatic."
                            }
                          },
                          "required": [
                            "explanation",
                            "filePath",
                            "oldString",
                            "newString"
                          ]
                        },
                        "minItems": 1
                      }
                    },
                    "required": [
                      "explanation",
                      "replacements"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "open_simple_browser",
                  "description": "Preview a website or open a URL in the editor's Simple Browser. Useful for quickly viewing locally hosted websites, demos, or resources without leaving the coding environment.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "The website URL to preview or open in the Simple Browser inside the editor. Must be either an http or https URL"
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "read_file",
                  "description": "Read the contents of a file. Line numbers are 1-indexed. This tool will truncate its output at 2000 lines and may be called repeatedly with offset and limit parameters to read larger files in chunks.",
                  "parameters": {
                    "type": "object",
                    "required": [
                      "filePath"
                    ],
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the file to read.",
                        "type": "string"
                      },
                      "offset": {
                        "description": "Optional: the 1-based line number to start reading from. Only use this if the file is too large to read at once. If not specified, the file will be read from the beginning.",
                        "type": "number"
                      },
                      "limit": {
                        "description": "Optional: the maximum number of lines to read. Only use this together with `offset` if the file is too large to read at once.",
                        "type": "number"
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "read_notebook_cell_output",
                  "description": "This tool will retrieve the output for a notebook cell from its most recent execution or restored from disk. The cell may have output even when it has not been run in the current kernel session. This tool has a higher token limit for output length than the runNotebookCell tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb"
                      },
                      "cellId": {
                        "type": "string",
                        "description": "The ID of the cell for which output should be retrieved."
                      }
                    },
                    "required": [
                      "filePath",
                      "cellId"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "replace_string_in_file",
                  "description": "This is a tool for making edits in an existing file in the workspace. For moving or renaming files, use run in terminal tool with the 'mv' command instead. For larger edits, split them into smaller edits and call the edit tool multiple times to ensure accuracy. Before editing, always ensure you have the context to understand the file's contents and context. To edit a file, provide: 1) filePath (absolute path), 2) oldString (MUST be the exact literal text to replace including all whitespace, indentation, newlines, and surrounding code etc), and 3) newString (MUST be the exact literal text to replace \\`oldString\\` with (also including all whitespace, indentation, newlines, and surrounding code etc.). Ensure the resulting code is correct and idiomatic.). Each use of this tool replaces exactly ONE occurrence of oldString.\n\nCRITICAL for \\`oldString\\`: Must uniquely identify the single instance to change. Include at least 3 lines of context BEFORE and AFTER the target text, matching whitespace and indentation precisely. If this string matches multiple locations, or does not match exactly, the tool will fail. Never use 'Lines 123-456 omitted' from summarized documents or ...existing code... comments in the oldString or newString.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the file to edit."
                      },
                      "oldString": {
                        "type": "string",
                        "description": "The exact literal text to replace, preferably unescaped. For single replacements (default), include at least 3 lines of context BEFORE and AFTER the target text, matching whitespace and indentation precisely. For multiple replacements, specify expected_replacements parameter. If this string is not the exact literal text (i.e. you escaped it) or does not match exactly, the tool will fail."
                      },
                      "newString": {
                        "type": "string",
                        "description": "The exact literal text to replace `old_string` with, preferably unescaped. Provide the EXACT text. Ensure the resulting code is correct and idiomatic."
                      }
                    },
                    "required": [
                      "filePath",
                      "oldString",
                      "newString"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_notebook_cell",
                  "description": "This is a tool for running a code cell in a notebook file directly in the notebook editor. The output from the execution will be returned. Code cells should be run as they are added or edited when working through a problem to bring the kernel state up to date and ensure the code executes successfully. Code cells are ready to run and don't require any pre-processing. If asked to run the first cell in a notebook, you should run the first code cell since markdown cells cannot be executed. NOTE: Avoid executing Markdown cells or providing Markdown cell IDs, as Markdown cells cannot be  executed.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb"
                      },
                      "reason": {
                        "type": "string",
                        "description": "An optional explanation of why the cell is being run. This will be shown to the user before the tool is run and is not necessary if it's self-explanatory."
                      },
                      "cellId": {
                        "type": "string",
                        "description": "The ID for the code cell to execute. Avoid providing markdown cell IDs as nothing will be executed."
                      },
                      "continueOnError": {
                        "type": "boolean",
                        "description": "Whether or not execution should continue for remaining cells if an error is encountered. Default to false unless instructed otherwise."
                      }
                    },
                    "required": [
                      "filePath",
                      "cellId"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_vscode_command",
                  "description": "Run a command in VS Code. Use this tool to run a command in Visual Studio Code as part of a new workspace creation process only.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "commandId": {
                        "type": "string",
                        "description": "The ID of the command to execute. This should be in the format <command>."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the command to execute. This should be a clear and concise description of the command."
                      },
                      "args": {
                        "type": "array",
                        "description": "The arguments to pass to the command. This should be an array of strings.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "commandId",
                      "name"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "semantic_search",
                  "description": "Run a natural language search for relevant code or documentation comments from the user's current workspace. Returns relevant code snippets from the user's current workspace if it is large, or the full contents of the workspace if it is small.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to search the codebase for. Should contain all relevant context. Should ideally be text that might appear in the codebase, such as function names, variable names, or comments."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "test_failure",
                  "description": "Includes test failure information in the prompt."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "vscode_searchExtensions_internal",
                  "description": "This is a tool for browsing Visual Studio Code Extensions Marketplace. It allows the model to search for extensions and retrieve detailed information about them. The model should use this tool whenever it needs to discover extensions or resolve information about known ones. To use the tool, the model has to provide the category of the extensions, relevant search keywords, or known extension IDs. Note that search results may include false positives, so reviewing and filtering is recommended.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "description": "The category of extensions to search for",
                        "enum": [
                          "AI",
                          "Azure",
                          "Chat",
                          "Data Science",
                          "Debuggers",
                          "Extension Packs",
                          "Education",
                          "Formatters",
                          "Keymaps",
                          "Language Packs",
                          "Linters",
                          "Machine Learning",
                          "Notebooks",
                          "Programming Languages",
                          "SCM Providers",
                          "Snippets",
                          "Testing",
                          "Themes",
                          "Visualization",
                          "Other"
                        ]
                      },
                      "keywords": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The keywords to search for"
                      },
                      "ids": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The ids of the extensions to search for"
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_and_run_task",
                  "description": "Creates and runs a build, run, or custom task for the workspace by generating or adding to a tasks.json file based on the project structure (such as package.json or README.md). If the user asks to build, run, launch and they have no tasks.json file, use this tool. If they ask to create or add a task, use this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceFolder": {
                        "type": "string",
                        "description": "The absolute path of the workspace folder where the tasks.json file will be created."
                      },
                      "task": {
                        "type": "object",
                        "description": "The task to add to the new tasks.json file.",
                        "properties": {
                          "label": {
                            "type": "string",
                            "description": "The label of the task."
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the task. The only supported value is 'shell'.",
                            "enum": [
                              "shell"
                            ]
                          },
                          "command": {
                            "type": "string",
                            "description": "The shell command to run for the task. Use this to specify commands for building or running the application."
                          },
                          "args": {
                            "type": "array",
                            "description": "The arguments to pass to the command.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "isBackground": {
                            "type": "boolean",
                            "description": "Whether the task runs in the background without blocking the UI or other tasks. Set to true for long-running processes like watch tasks or servers that should continue executing without requiring user attention. When false, the task will block the terminal until completion."
                          },
                          "problemMatcher": {
                            "type": "array",
                            "description": "The problem matcher to use to parse task output for errors and warnings. Can be a predefined matcher like '$tsc' (TypeScript), '$eslint - stylish', '$gcc', etc., or a custom pattern defined in tasks.json. This helps VS Code display errors in the Problems panel and enables quick navigation to error locations.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "group": {
                            "type": "string",
                            "description": "The group to which the task belongs."
                          }
                        },
                        "required": [
                          "label",
                          "type",
                          "command"
                        ]
                      }
                    },
                    "required": [
                      "task",
                      "workspaceFolder"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_task_output",
                  "description": "Get the output of a task",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The task ID for which to get the output."
                      },
                      "workspaceFolder": {
                        "type": "string",
                        "description": "The workspace folder path containing the task"
                      }
                    },
                    "required": [
                      "id",
                      "workspaceFolder"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_terminal_output",
                  "description": "Get the output of a terminal command previously started with run_in_terminal",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the terminal to check."
                      }
                    },
                    "required": [
                      "id"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "manage_todo_list",
                  "description": "Manage a structured todo list to track progress and plan tasks throughout your coding session. Use this tool VERY frequently to ensure task visibility and proper planning.\n\nWhen to use this tool:\n- Complex multi-step work requiring planning and tracking\n- When user provides multiple tasks or requests (numbered/comma-separated)\n- After receiving new instructions that require multiple steps\n- BEFORE starting work on any todo (mark as in-progress)\n- IMMEDIATELY after completing each todo (mark completed individually)\n- When breaking down larger tasks into smaller actionable steps\n- To give users visibility into your progress and planning\n\nWhen NOT to use:\n- Single, trivial tasks that can be completed in one step\n- Purely conversational/informational requests\n- When just reading files or performing simple searches\n\nCRITICAL workflow:\n1. Plan tasks by writing todo list with specific, actionable items\n2. Mark ONE todo as in-progress before starting work\n3. Complete the work for that specific todo\n4. Mark that todo as completed IMMEDIATELY\n5. Move to next todo and repeat\n\nTodo states:\n- not-started: Todo not yet begun\n- in-progress: Currently working (limit ONE at a time)\n- completed: Finished successfully\n\nIMPORTANT: Mark todos completed as soon as they are done. Do not batch completions.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "todoList": {
                        "type": "array",
                        "description": "Complete array of all todo items (required for write operation, ignored for read). Must include ALL items - both existing and new.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number",
                              "description": "Unique identifier for the todo. Use sequential numbers starting from 1."
                            },
                            "title": {
                              "type": "string",
                              "description": "Concise action-oriented todo label (3-7 words). Displayed in UI."
                            },
                            "description": {
                              "type": "string",
                              "description": "Detailed context, requirements, or implementation notes. Include file paths, specific methods, or acceptance criteria."
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "not-started",
                                "in-progress",
                                "completed"
                              ],
                              "description": "not-started: Not begun | in-progress: Currently working (max 1) | completed: Fully finished with no blockers"
                            }
                          },
                          "required": [
                            "id",
                            "title",
                            "description",
                            "status"
                          ]
                        }
                      },
                      "operation": {
                        "type": "string",
                        "enum": [
                          "write",
                          "read"
                        ],
                        "description": "write: Replace entire todo list with new content. read: Retrieve current todo list. ALWAYS provide complete list when writing - partial updates not supported."
                      }
                    },
                    "required": [
                      "operation"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_in_terminal",
                  "description": "This tool allows you to execute PowerShell commands in a persistent terminal session, preserving environment variables, working directory, and other context across multiple commands.\n\nCommand Execution:\n- Use semicolons ; to chain commands on one line, NEVER use && even when asked explicitly\n- Prefer pipelines | for object-based data flow\n- Never create a sub-shell (eg. powershell -c \"command\") unless explicitly asked\n\nDirectory Management:\n- Must use absolute paths to avoid navigation issues\n- Use $PWD or Get-Location for current directory\n- Use Push-Location/Pop-Location for directory stack\n\nProgram Execution:\n- Supports .NET, Python, Node.js, and other executables\n- Install modules via Install-Module, Install-Package\n- Use Get-Command to verify cmdlet/function availability\n\nBackground Processes:\n- For long-running tasks (e.g., servers), set isBackground=true\n- Returns a terminal ID for checking status and runtime later\n- Use Start-Job for background PowerShell jobs\n\nOutput Management:\n- Output is automatically truncated if longer than 60KB to prevent context overflow\n- Use Select-Object, Where-Object, Format-Table to filter output\n- Use -First/-Last parameters to limit results\n- For pager commands, add | Out-String or | Format-List\n\nBest Practices:\n- Use proper cmdlet names instead of aliases in scripts\n- Quote paths with spaces: \"C:\\Path With Spaces\"\n- Prefer PowerShell cmdlets over external commands when available\n- Prefer idiomatic PowerShell like Get-ChildItem instead of dir or ls for file listings\n- Use Test-Path to check file/directory existence\n- Be specific with Select-Object properties to avoid excessive output",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "command": {
                        "type": "string",
                        "description": "The command to run in the terminal."
                      },
                      "explanation": {
                        "type": "string",
                        "description": "A one-sentence description of what the command does. This will be shown to the user before the command is run."
                      },
                      "isBackground": {
                        "type": "boolean",
                        "description": "Whether the command starts a background process. If true, the command will run in the background and you will not see the output. If false, the tool call will block on the command finishing, and then you will get the output. Examples of background processes: building in watch mode, starting a server. You can check the output of a background process later on by using get_terminal_output."
                      }
                    },
                    "required": [
                      "command",
                      "explanation",
                      "isBackground"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_task",
                  "description": "Runs a VS Code task.\n\n- If you see that an appropriate task exists for building or running code, prefer to use this tool to run the task instead of using the run_in_terminal tool.\n- Make sure that any appropriate build or watch task is running before trying to run tests or execute code.\n- If the user asks to run a task, use this tool to do so.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceFolder": {
                        "type": "string",
                        "description": "The workspace folder path containing the task"
                      },
                      "id": {
                        "type": "string",
                        "description": "The task ID to run."
                      }
                    },
                    "required": [
                      "workspaceFolder",
                      "id"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "runSubagent",
                  "description": "Launch a new agent to handle complex, multi-step tasks autonomously. This tool is good at researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries, use this agent to perform the search for you.\n\n- Agents do not run async or in the background, you will wait for the agent's result.\n- When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n - Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n - The agent's outputs should generally be trusted\n - Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "prompt": {
                        "type": "string",
                        "description": "A detailed description of the task for the agent to perform"
                      },
                      "description": {
                        "type": "string",
                        "description": "A short (3-5 word) description of the task"
                      }
                    },
                    "required": [
                      "prompt",
                      "description"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "runTests",
                  "description": "Runs unit tests in files. Use this tool if the user asks to run tests or when you want to validate changes using unit tests, and prefer using this tool instead of the terminal tool. When possible, always try to provide `files` paths containing the relevant unit tests in order to avoid unnecessarily long test runs. This tool outputs detailed information about the results of the test run. Set mode=\"coverage\" to also collect coverage and optionally provide coverageFiles for focused reporting.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Absolute paths to the test files to run. If not provided, all test files will be run."
                      },
                      "testNames": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "An array of test names to run. Depending on the context, test names defined in code may be strings or the names of functions or classes containing the test cases. If not provided, all tests in the files will be run."
                      },
                      "mode": {
                        "type": "string",
                        "enum": [
                          "run",
                          "coverage"
                        ],
                        "description": "Execution mode: \"run\" (default) runs tests normally, \"coverage\" collects coverage."
                      },
                      "coverageFiles": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "When mode=\"coverage\": absolute file paths to include detailed coverage info for. Only the first matching file will be summarized."
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "terminal_last_command",
                  "description": "Get the last command run in the active terminal."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "terminal_selection",
                  "description": "Get the current selection in the active terminal."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "notebook_install_packages",
                  "description": "Install a list of packages on a notebook kernel to be used within that notebook. This tool should be used when working with a jupyter notebook with python code cells. Do not use this tool if not already working with a notebook, or for a language other than python. If the tool configure_notebooks exists, then ensure to call configure_notebooks before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the notebook with the active kernel.",
                        "type": "string"
                      },
                      "packageList": {
                        "description": "A list of packages to install.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "filePath",
                      "packageList"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "notebook_list_packages",
                  "description": "List the installed packages that are currently available in the selected kernel for a notebook editor. This tool should be used when working with a jupyter notebook with python code cells. Do not use this tool if not already working with a notebook, or for a language other than python. If the tool configure_notebooks exists, then ensure to call configure_notebooks before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the notebook with the active kernel.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "filePath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_python_environment_details",
                  "description": "This tool will retrieve the details of the Python Environment for the specified file or workspace. The details returned include the 1. Type of Python Environment (conda, venv, etec), 2. Version of Python, 3. List of all installed Python packages with their versions. ALWAYS call configure_python_environment before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace to get the environment information for."
                      }
                    },
                    "required": []
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_python_executable_details",
                  "description": "This tool will retrieve the details of the Python Environment for the specified file or workspace. ALWAYS use this tool before executing any Python command in the terminal. This tool returns the details of how to construct the fully qualified path and or command including details such as arguments required to run Python in a terminal. Note: Instead of executing `python --version` or `python -c 'import sys; print(sys.executable)'`, use this tool to get the Python executable path to replace the `python` command. E.g. instead of using `python -c 'import sys; print(sys.executable)'`, use this tool to build the command `conda run -n <env_name> -c 'import sys; print(sys.executable)'`. ALWAYS call configure_python_environment before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace to get the executable information for. If not provided, the current workspace will be used. Where possible pass the path to the file or workspace."
                      }
                    },
                    "required": []
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "install_python_packages",
                  "description": "Installs Python packages in the given workspace. Use this tool to install Python packages in the user's chosen Python environment. ALWAYS call configure_python_environment before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "packageList": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The list of Python packages to install."
                      },
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace into which the packages are installed. If not provided, the current workspace will be used. Where possible pass the path to the file or workspace."
                      }
                    },
                    "required": [
                      "packageList"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "evaluateExpressionInDebugSession",
                  "description": "Evaluate an expression in a specific debug session",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "debugSessionId": {
                        "type": "number",
                        "description": "The ID of the debug session to evaluate the expression in"
                      },
                      "expression": {
                        "type": "string",
                        "description": "The expression to evaluate in the debug session"
                      }
                    },
                    "required": [
                      "debugSessionId",
                      "expression"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "listDebugSessions",
                  "description": "List all active debug sessions with their IDs, names, and expression language IDs",
                  "parameters": {
                    "type": "object",
                    "properties": {}
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_activePullRequest",
                  "description": "Get comprehensive information about the active GitHub pull request (PR). The active PR is the one that is currently checked out. This includes the PR title, full description, list of changed files, review comments, PR state, and status checks/CI results. For PRs created by Copilot, it also includes the session logs which indicate the development process and decisions made by the coding agent. When asked about the active or current pull request, do this first! Use this tool for any request related to \"current changes,\" \"pull request details,\" \"what changed,\" \"PR status,\" or similar queries even if the user does not explicitly mention \"pull request.\" When asked to use this tool, ALWAYS use it."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_copilot-coding-agent",
                  "description": "Completes the provided task using an asynchronous coding agent. Use when the user wants copilot continue completing a task in the background or asynchronously. IMPORTANT: Use this tool LAST/FINAL when users mention '#github-pull-request_copilot-coding-agent' in their query. This indicates they want the task/job implemented by the remote coding agent after all other analysis, planning, and preparation is complete. Call this tool at the END to hand off the fully-scoped task to the asynchronous GitHub Copilot coding agent. The agent will create a new branch, implement the changes, and open a pull request. Always use this tool as the final step when the hashtag is mentioned, after completing any other necessary tools or analysis first.",
                  "parameters": {
                    "type": "object",
                    "required": [
                      "title",
                      "body"
                    ],
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "The title of the issue. Populate from chat context."
                      },
                      "body": {
                        "type": "string",
                        "description": "The body/description of the issue. Populate from chat context."
                      },
                      "existingPullRequest": {
                        "type": "number",
                        "description": "The number of an existing pull request related to the current coding agent task. Look in the chat history for this number.  In the chat it may look like 'Coding agent will continue work in #17...'. In this example, you should return '17'."
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_doSearch",
                  "description": "Execute a GitHub search given a well formed GitHub search query. Call github-pull-request_formSearchQuery first to get good search syntax and pass the exact result in as the 'query'.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "query": {
                        "type": "string",
                        "description": "A well formed GitHub search query using proper GitHub search syntax."
                      }
                    },
                    "required": [
                      "query",
                      "repo"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_formSearchQuery",
                  "description": "Converts natural language to a GitHub search query. Should ALWAYS be called before doing a search.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "naturalLanguageString": {
                        "type": "string",
                        "description": "A plain text description of what the search should be."
                      }
                    },
                    "required": [
                      "naturalLanguageString"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_issue_fetch",
                  "description": "Get a GitHub issue/PR's details as a JSON object.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue/PR from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue/PR from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue/PR from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "issueNumber": {
                        "type": "number",
                        "description": "The number of the issue/PR to get."
                      }
                    },
                    "required": [
                      "issueNumber"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_openPullRequest",
                  "description": "Get comprehensive information about the GitHub pull request (PR) which is currently visible, but not necessarily checked out. This includes the PR title, full description, list of changed files, review comments, PR state, and status checks/CI results. For PRs created by Copilot, it also includes the session logs which indicate the development process and decisions made by the coding agent. When asked about the currently open pull request, do this first! Use this tool for any request related to \"pull request details,\" \"what changed,\" \"PR status,\" or similar queries even if the user does not explicitly mention \"pull request.\" When asked to use this tool, ALWAYS use it."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_renderIssues",
                  "description": "Render issue items from an issue search in a markdown table. The markdown table will be displayed directly to the user by the tool. No further display should be done after this!",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "arrayOfIssues": {
                        "type": "array",
                        "description": "An array of GitHub Issues.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "The title of the issue."
                            },
                            "number": {
                              "type": "number",
                              "description": "The number of the issue."
                            },
                            "url": {
                              "type": "string",
                              "description": "The URL of the issue."
                            },
                            "state": {
                              "type": "string",
                              "description": "The state of the issue (open/closed)."
                            },
                            "createdAt": {
                              "type": "string",
                              "description": "The creation date of the issue."
                            },
                            "updatedAt": {
                              "type": "string",
                              "description": "The last update date of the issue."
                            },
                            "closedAt": {
                              "type": "string",
                              "description": "The closing date of the issue."
                            },
                            "author": {
                              "type": "object",
                              "description": "The author of the issue.",
                              "properties": {
                                "login": {
                                  "type": "string",
                                  "description": "The login of the author."
                                },
                                "url": {
                                  "type": "string",
                                  "description": "The URL of the author's profile."
                                }
                              }
                            },
                            "labels": {
                              "type": "array",
                              "description": "The labels associated with the issue.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the label."
                                  },
                                  "color": {
                                    "type": "string",
                                    "description": "The color of the label."
                                  }
                                }
                              }
                            },
                            "assignees": {
                              "type": "array",
                              "description": "The assignees of the issue.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "login": {
                                    "type": "string",
                                    "description": "The login of the assignee."
                                  },
                                  "url": {
                                    "type": "string",
                                    "description": "The URL of the assignee's profile."
                                  }
                                }
                              }
                            },
                            "commentsCount": {
                              "type": "number",
                              "description": "The number of comments on the issue."
                            }
                          },
                          "required": [
                            "title",
                            "number",
                            "url",
                            "state",
                            "createdAt",
                            "author"
                          ]
                        }
                      },
                      "totalIssues": {
                        "type": "number",
                        "description": "The total number of issues in the search."
                      }
                    },
                    "required": [
                      "arrayOfIssues",
                      "totalIssues"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_suggest-fix",
                  "description": "Summarize and suggest a fix for a GitHub issue.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "issueNumber": {
                        "type": "number",
                        "description": "The number of the issue to get."
                      }
                    },
                    "required": [
                      "issueNumber",
                      "repo"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "kustoSchema",
                  "description": "Returns the Schema of a Kusto Database (including table, column, function names and more). Always use this tool when generating Kusto KQL queries without making assumptions about the available tables, columns and functions."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceInstalledTopLevelModules",
                  "description": "Get available top-level modules from installed Python packages in environment. Shows what can be imported. Use for: checking if packages are installed, verifying import availability, helping users understand available modules.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "pythonEnvironment": {
                        "type": "string",
                        "description": "The Python environment to use. Must be a value returned by the pylancePythonEnvironments tool. If pythonEnvironment is missing, the python environment of the workspace will be used."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceInvokeRefactoring",
                  "description": "Apply automated code refactoring to Python files. Returns refactored content (does not modify original file) unless mode is \"update\". Use for: extracting functions, organizing imports, improving code structure, applying refactoring patterns.  Optional \"mode\" parameter: \"update\" updates the file, \"edits\" returns a WorkspaceEdit, \"string\" returns updated content as string. If mode is not specified, \"update\" will be used as the default. The \"edits\" mode is helpful for determining if a file needs changes (for example, to remove unused imports or fix import formatting) without making any modifications; if no changes are needed, the result will be either an empty WorkspaceEdit or a message indicating that no text edits were found. Available refactorings: source.unusedImports: - Removes all unused import statements from a Python file. Use when imports are imported but never referenced in the code. Requires fileUri parameter pointing to a Python file with unused imports.\nsource.convertImportFormat: - Converts import statements between absolute and relative formats according to python.analysis.importFormat setting. Use when import format consistency is needed. Requires fileUri parameter pointing to a Python file with imports to convert.\nsource.fixAll.pylance: - Applies all available automatic code fixes from python.analysis.fixAll setting. Use when multiple code issues need to be addressed simultaneously. Requires fileUri parameter pointing to a Python file with fixable issues.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "fileUri": {
                        "type": "string",
                        "description": "The uri of the file to invoke the refactoring."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the refactoring to invoke. This must be one of these [source.unusedImports, source.convertImportFormat, source.fixAll.pylance]"
                      },
                      "mode": {
                        "type": "string",
                        "enum": [
                          "update",
                          "edits",
                          "string"
                        ],
                        "description": "Determines the output mode: \"update\" updates the file directly, \"edits\" returns a WorkspaceEdit, \"string\" returns the updated content as a string. If omitted, \"update\" will be used as the default. The \"edits\" mode is especially useful for checking if any changes are needed (such as unused imports or import formatting issues) without modifying the file, as it will return a WorkspaceEdit only if edits are required."
                      }
                    },
                    "required": [
                      "fileUri",
                      "name"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylancePythonEnvironments",
                  "description": "Get Python environment information for workspace: current active environment and all available environments. Use for: Python environment issues, switching environments, understanding Python setup.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceSettings",
                  "description": "Get current Python analysis settings and configuration for a workspace. Returns all \"python.analysis.*\" settings with default vs user-configured indicators. Use for: troubleshooting configuration, checking current settings, diagnosing analysis issues.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceUpdatePythonEnvironment",
                  "description": "Switch active Python environment for workspace to different Python installation or virtual environment. Updates settings and ensures subsequent operations use new environment. Use for: changing Python versions, switching to virtual environments, resolving environment issues.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "pythonEnvironment": {
                        "type": "string",
                        "description": "The Python environment to use. Must be either a value returned by the pylancePythonEnvironments tool or the absolute path to a Python executable."
                      }
                    },
                    "required": [
                      "workspaceRoot",
                      "pythonEnvironment"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              }
            ]
          },
          "requestMessages": {
            "messages": [
              {
                "role": 0,
                "content": [
                  {
                    "type": 1,
                    "text": "You are an expert AI programming assistant, working with a user in the VS Code editor.\nWhen asked for your name, you must respond with \"GitHub Copilot\". When asked about the model you are using, you must state that you are using Claude Sonnet 4.\nFollow the user's requirements carefully & to the letter.\nFollow Microsoft content policies.\nAvoid content that violates copyrights.\nIf you are asked to generate content that is harmful, hateful, racist, sexist, lewd, or violent, only respond with \"Sorry, I can't assist with that.\"\nKeep your answers short and impersonal.\n<instructions>\nYou are a highly sophisticated automated coding agent with expert-level knowledge across many different programming languages and frameworks.\nThe user will ask a question, or ask you to perform a task, and it may require lots of research to answer correctly. There is a selection of tools that let you perform actions or retrieve helpful context to answer the user's question.\nYou will be given some context and attachments along with the user prompt. You can use them if they are relevant to the task, and ignore them if not. Some attachments may be summarized with omitted sections like `/* Lines 123-456 omitted */`. You can use the read_file tool to read more context if needed. Never pass this omitted line marker to an edit tool.\nIf you can infer the project type (languages, frameworks, and libraries) from the user's query or the context that you have, make sure to keep them in mind when making changes.\nIf the user wants you to implement a feature and they have not specified the files to edit, first break down the user's request into smaller concepts and think about the kinds of files you need to grasp each concept.\nIf you aren't sure which tool is relevant, you can call multiple tools. You can call tools repeatedly to take actions or gather as much context as needed until you have completed the task fully. Don't give up unless you are sure the request cannot be fulfilled with the tools you have. It's YOUR RESPONSIBILITY to make sure that you have done all you can to collect necessary context.\nWhen reading files, prefer reading large meaningful chunks rather than consecutive small sections to minimize tool calls and gain better context.\nDon't make assumptions about the situation- gather context first, then perform the task or answer the question.\nThink creatively and explore the workspace in order to make a complete fix.\nDon't repeat yourself after a tool call, pick up where you left off.\nNEVER print out a codeblock with file changes unless the user asked for it. Use the appropriate edit tool instead.\nNEVER print out a codeblock with a terminal command to run unless the user asked for it. Use the run_in_terminal tool instead.\nYou don't need to read a file if it's already provided in context.\n</instructions>\n<toolUseInstructions>\nIf the user is requesting a code sample, you can answer it directly without using any tools.\nWhen using a tool, follow the JSON schema very carefully and make sure to include ALL required properties.\nNo need to ask permission before using a tool.\nNEVER say the name of a tool to a user. For example, instead of saying that you'll use the run_in_terminal tool, say \"I'll run the command in a terminal\".\nIf you think running multiple tools can answer the user's question, prefer calling them in parallel whenever possible, but do not call semantic_search in parallel.\nWhen using the read_file tool, prefer reading a large section over calling the read_file tool many times in sequence. You can also think of all the pieces you may be interested in and read them in parallel. Read large enough context to ensure you get what you need.\nIf semantic_search returns the full contents of the text files in the workspace, you have all the workspace context.\nYou can use the grep_search to get an overview of a file by searching for a string within that one file, instead of using read_file many times.\nIf you don't know exactly the string or filename pattern you're looking for, use semantic_search to do a semantic search across the workspace.\nDon't call the run_in_terminal tool multiple times in parallel. Instead, run one command and wait for the output before running the next command.\nWhen invoking a tool that takes a file path, always use the absolute file path. If the file has a scheme like untitled: or vscode-userdata:, then use a URI with the scheme.\nNEVER try to edit a file by running terminal commands unless the user specifically asks for it.\nTools can be disabled by the user. You may see tools used previously in the conversation that are not currently available. Be careful to only use the tools that are currently available to you.\n</toolUseInstructions>\n<notebookInstructions>\nTo edit notebook files in the workspace, you can use the edit_notebook_file tool.\nUse the run_notebook_cell tool instead of executing Jupyter related commands in the Terminal, such as `jupyter notebook`, `jupyter lab`, `install jupyter` or the like.\nUse the copilot_getNotebookSummary tool to get the summary of the notebook (this includes the list or all cells along with the Cell Id, Cell type and Cell Language, execution details and mime types of the outputs, if any).\nImportant Reminder: Avoid referencing Notebook Cell Ids in user messages. Use cell number instead.\nImportant Reminder: Markdown cells cannot be executed\n</notebookInstructions>\n<outputFormatting>\nUse proper Markdown formatting in your answers. When referring to a filename or symbol in the user's workspace, wrap it in backticks.\n<example>\nThe class `Person` is in `src/models/person.ts`.\nThe function `calculateTotal` is defined in `lib/utils/math.ts`.\nYou can find the configuration in `config/app.config.json`.\n</example>\nUse KaTeX for math equations in your answers.\nWrap inline math equations in $.\nWrap more complex blocks of math equations in $$.\n\n</outputFormatting>\n\n<instructions>\nHere is a list of instruction files that contain rules for modifying or creating new code.\nThese files are important for ensuring that the code is modified or created correctly.\nPlease make sure to follow the rules specified in these files when working with the codebase.\nIf the file is not already available as attachment, use the `read_file` tool to acquire it.\nMake sure to acquire the instructions before making any changes to the code.\n| File | Applies To | Description |\n| ------- | --------- | ----------- |\n| 'vscode-userdata:/c%3A/Users/aaron/AppData/Roaming/Code%20-%20Insiders/User/prompts/general.instructions.md' | **/* |  |\n</instructions>\n"
                  },
                  {
                    "type": 3,
                    "cacheType": "ephemeral"
                  }
                ]
              },
              {
                "role": 1,
                "content": [
                  {
                    "type": 1,
                    "text": "<environment_info>\nThe user's current OS is: Windows\nThe user's default shell is: \"pwsh.exe\". When you generate terminal commands, please generate them correctly for this shell.\n</environment_info>\n<workspace_info>\nThe following tasks can be executed using the run_task tool if they are not already running:\n<workspaceFolder path=\"c:\\\\src\\\\test\\\\ws2\">\n<task id=\"shell: echo\">\n{\n\t\"label\": \"echo\",\n\t\"type\": \"shell\",\n\t\"command\": \"echo Hello\"\n}\n</task>\n<task id=\"shell: getFile\">\n{\n\t\"label\": \"getFile\",\n\t\"type\": \"shell\",\n\t\"isBackground\": false,\n\t\"command\": \"cat ./file.txt\"\n}\n</task>\n\n</workspaceFolder>\nI am working in a workspace with the following folders:\n- c:\\src\\test\\ws2 \nI am working in a workspace that has the following structure:\n```\n1.ipynb\n1.py\n1.txt\n4.ipynb\nChipotle.solution.ipynb\ndataFrames.py\nexported.ipynb\nhello_world.ipynb\nhello.ipynb\nInteractive-1.ipynb\niris_analysis.ipynb\nmyLib.py\nnotebook.ipynb\nsample.csv\nsaved.ipynb\nscript.py\nscriptFun.py\ntest.md\nthis.txt\nunnecessaryEdit.txt\nUntitled-1.ipynb\nUntitled-2.ipynb\nUntitled-3.ipynb\nvars.ipynb\nvars.py\nzzz.ipynb\nzzz1.ipynb\nzzz2.ipynb\nzzzz.ipynb\n__pycache__/\ndirA/\n\ttest.ipynb\ndirB/\n```\nThis is the state of the context at this point in the conversation. The view of the workspace structure may be truncated. You can use tools to collect more context if needed.\n</workspace_info>\n"
                  },
                  {
                    "type": 3,
                    "cacheType": "ephemeral"
                  }
                ]
              },
              {
                "role": 1,
                "content": [
                  {
                    "type": 1,
                    "text": "<context>\nThe current date is October 31, 2025.\nTerminals:\nTerminal: pwsh\n\n</context>\n<reminderInstructions>\nWhen using the replace_string_in_file tool, include 3-5 lines of unchanged code before and after the string you want to replace, to make it unambiguous which part of the file should be edited.\nFor maximum efficiency, whenever you plan to perform multiple independent edit operations, invoke them simultaneously using multi_replace_string_in_file tool rather than sequentially. This will greatly improve user's cost and time efficiency leading to a better user experience. Do not announce which tool you're using (for example, avoid saying \"I'll implement all the changes using multi_replace_string_in_file\").\n\n</reminderInstructions>\n<userRequest>\ncreate a file that says \n\"hello\"\n</userRequest>\n"
                  },
                  {
                    "type": 3,
                    "cacheType": "ephemeral"
                  }
                ]
              },
              {
                "role": 2,
                "content": [
                  {
                    "type": 1,
                    "text": "I'll create a simple file that says \"hello\" for you. "
                  }
                ],
                "toolCalls": [
                  {
                    "function": {
                      "name": "create_file",
                      "arguments": "{\"filePath\": \"c:\\\\src\\\\test\\\\ws2\\\\hello.txt\", \"content\": \"hello\"}"
                    },
                    "id": "toolu_vrtx_01NGpatVG4s9Bozweeox7g5T",
                    "type": "function"
                  }
                ]
              },
              {
                "role": 3,
                "content": [
                  {
                    "type": 1,
                    "text": "The following files were successfully edited:\nc:\\src\\test\\ws2\\hello.txt\n"
                  },
                  {
                    "type": 3,
                    "cacheType": "ephemeral"
                  }
                ],
                "toolCallId": "toolu_vrtx_01NGpatVG4s9Bozweeox7g5T"
              }
            ]
          },
          "response": {
            "type": "success",
            "message": [
              "I've created a file called `hello.txt` in your workspace that contains the text \"hello\"."
            ]
          }
        }
      ]
    },
    {
      "prompt": "change it to (goodbye)",
      "hasSeen": false,
      "logCount": 5,
      "logs": [
        {
          "id": "69833cf6",
          "kind": "element",
          "name": "Gh",
          "tokens": 2809,
          "maxTokens": 99003
        },
        {
          "id": "495c5cfc",
          "kind": "request",
          "type": "ChatMLSuccess",
          "name": "panel/editAgent",
          "metadata": {
            "requestType": "ChatCompletions",
            "model": "claude-sonnet-4.5",
            "maxPromptTokens": 127997,
            "maxResponseTokens": 16000,
            "location": 7,
            "postOptions": {
              "temperature": 0,
              "top_p": 1,
              "max_tokens": 16000,
              "n": 1,
              "stream": true
            },
            "startTime": "2025-10-31T16:05:02.224Z",
            "endTime": "2025-10-31T16:05:04.737Z",
            "duration": 2513,
            "ourRequestId": "0ab2d9e1-5bf0-4ab8-ac72-f509a79cac28",
            "requestId": "0ab2d9e1-5bf0-4ab8-ac72-f509a79cac28",
            "serverRequestId": "0ab2d9e1-5bf0-4ab8-ac72-f509a79cac28",
            "timeToFirstToken": 2510,
            "usage": {
              "completion_tokens": 105,
              "prompt_tokens": 19234,
              "prompt_tokens_details": {
                "cached_tokens": 0
              },
              "total_tokens": 19339
            },
            "tools": [
              {
                "function": {
                  "name": "logpoint_generator_add_logpoint",
                  "description": "Create a debugger log point that will print a log to the debug panel with the provided message when the debugger reaches that point. The message can be interpolated with variables from the debugger by surrounding with {}.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the file to read.",
                        "type": "string"
                      },
                      "lineNumber": {
                        "description": "The 1-based line number on which to add the log point. The line should contain executable code and needs to be after any variable referenced in the log message",
                        "type": "number"
                      },
                      "logMessage": {
                        "type": "string",
                        "description": "The message that will print in the debug panel. Debugger variables can be interpolated by surrounding the variable name with {}. The variables need to have already been assigned and exist in scope as the code on the target line."
                      }
                    },
                    "required": [
                      "filePath",
                      "lineNumber",
                      "logMessage"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceRunCodeSnippet",
                  "description": "Execute Python code snippets directly in the workspace environment. PREFERRED over terminal commands for running Python code. This tool automatically uses the correct Python interpreter configured for the workspace, eliminates shell escaping/quoting problems that plague terminal execution, and provides clean, properly formatted output with stdout/stderr correctly interleaved. Use this instead of `python -c \"code\"` or terminal commands when running Python snippets. Ideal for: testing code, running quick scripts, validating Python expressions, checking imports, and any Python execution within the workspace context. No temporary files needed - code runs directly in memory.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "codeSnippet": {
                        "type": "string",
                        "description": "The code snippet to run."
                      },
                      "workingDirectory": {
                        "type": "string",
                        "description": "The working directory to use for the code snippet. If the code snippet is pulled from a file, this should be the directory for the file. Especially if the snippet has imports."
                      },
                      "timeout": {
                        "type": "number",
                        "minimum": 0,
                        "description": "The timeout for the code snippet execution."
                      }
                    },
                    "required": [
                      "workspaceRoot",
                      "codeSnippet"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "configure_notebook",
                  "description": "Tool used to configure a Notebook. ALWAYS use this tool before running/executing any Notebook Cells for the first time or before listing/installing packages in Notebooks for the first time. I.e. there is no need to use this tool more than once for the same notebook.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the notebook with the active kernel.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "filePath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceFileSyntaxErrors",
                  "description": "Check Python file for syntax errors. Returns detailed error list with line numbers, messages, and error types. Use when: users report syntax problems, validating files before processing, debugging parse errors.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "fileUri": {
                        "type": "string",
                        "description": "The uri of the file to check for syntax errors. Must be a user file in the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot",
                      "fileUri"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceDocuments",
                  "description": "Search Pylance documentation for Python language server help, configuration guidance, feature explanations, and troubleshooting. Returns comprehensive answers about Pylance settings, capabilities, and usage. Use when users ask: How to configure Pylance? What features are available? How to fix Pylance issues?",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "search": {
                        "type": "string",
                        "description": "Detailed question in natural language. Think of it as a prompt for an LLM. Do not use keyword search terms."
                      }
                    },
                    "required": [
                      "search"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "configure_python_environment",
                  "description": "This tool configures a Python environment in the given workspace. ALWAYS Use this tool to set up the user's chosen environment and ALWAYS call this tool before using any other Python related tools or running any Python command in the terminal.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace for which a Python Environment needs to be configured."
                      }
                    },
                    "required": []
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceWorkspaceRoots",
                  "description": "Get workspace root directories. Returns workspace root for specific file or all workspace roots if no file provided. Use for: understanding workspace structure, getting paths for other operations.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "fileUri": {
                        "type": "string",
                        "description": "The uri of the file to check its workspace"
                      }
                    },
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceSyntaxErrors",
                  "description": "Validate Python code snippets for syntax errors without saving to file. Returns syntax error details with line numbers and descriptions. Use for: validating generated code, checking user code snippets, pre-execution validation.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The Python code to check for syntax errors."
                      },
                      "pythonVersion": {
                        "type": "string",
                        "description": "The version of Python to use for the syntax check. Must be a valid Python version string. ex) \"3.10\" or \"3.11.4\"."
                      }
                    },
                    "required": [
                      "code",
                      "pythonVersion"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceWorkspaceUserFiles",
                  "description": "Get list of all user Python files in workspace (excludes library/dependency files). Respects python.analysis.include/exclude settings. Use for: analyzing user code, searching project files, operating on user-created Python files.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceImports",
                  "description": "Analyze imports across workspace user files. Returns all top-level module names imported, including resolved and unresolved imports. Use for: finding missing dependencies, understanding project dependencies, analyzing import patterns.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_directory",
                  "description": "Create a new directory structure in the workspace. Will recursively create all directories in the path, like mkdir -p. You do not need to use this tool before using create_file, that tool will automatically create the needed directories.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "dirPath": {
                        "type": "string",
                        "description": "The absolute path to the directory to create."
                      }
                    },
                    "required": [
                      "dirPath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_file",
                  "description": "This is a tool for creating a new file in the workspace. The file will be created with the specified content. The directory will be created if it does not already exist. Never use this tool to edit a file that already exists.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "The absolute path to the file to create."
                      },
                      "content": {
                        "type": "string",
                        "description": "The content to write to the file."
                      }
                    },
                    "required": [
                      "filePath",
                      "content"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_new_jupyter_notebook",
                  "description": "Generates a new Jupyter Notebook (.ipynb) in VS Code. Jupyter Notebooks are interactive documents commonly used for data exploration, analysis, visualization, and combining code with narrative text. Prefer creating plain Python files or similar unless a user explicitly requests creating a new Jupyter Notebook or already has a Jupyter Notebook opened or exists in the workspace.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to use to generate the jupyter notebook. This should be a clear and concise description of the notebook the user wants to create."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_new_workspace",
                  "description": "Get comprehensive setup steps to help the user create complete project structures in a VS Code workspace. This tool is designed for full project initialization and scaffolding, not for creating individual files.\n\nWhen to use this tool:\n- User wants to create a new complete project from scratch\n- Setting up entire project frameworks (TypeScript projects, React apps, Node.js servers, etc.)\n- Initializing Model Context Protocol (MCP) servers with full structure\n- Creating VS Code extensions with proper scaffolding\n- Setting up Next.js, Vite, or other framework-based projects\n- User asks for \"new project\", \"create a workspace\", \"set up a [framework] project\"\n- Need to establish complete development environment with dependencies, config files, and folder structure\n\nWhen NOT to use this tool:\n- Creating single files or small code snippets\n- Adding individual files to existing projects\n- Making modifications to existing codebases\n- User asks to \"create a file\" or \"add a component\"\n- Simple code examples or demonstrations\n- Debugging or fixing existing code\n\nThis tool provides complete project setup including:\n- Folder structure creation\n- Package.json and dependency management\n- Configuration files (tsconfig, eslint, etc.)\n- Initial boilerplate code\n- Development environment setup\n- Build and run instructions\n\nUse other file creation tools for individual files within existing projects.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to use to generate the new workspace. This should be a clear and concise description of the workspace the user wants to create."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "edit_notebook_file",
                  "description": "This is a tool for editing an existing Notebook file in the workspace. Generate the \"explanation\" property first.\nThe system is very smart and can understand how to apply your edits to the notebooks.\nWhen updating the content of an existing cell, ensure newCode preserves whitespace and indentation exactly and does NOT include any code markers such as (...existing code...).",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file to edit, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1."
                      },
                      "cellId": {
                        "type": "string",
                        "description": "Id of the cell that needs to be deleted or edited. Use the value `TOP`, `BOTTOM` when inserting a cell at the top or bottom of the notebook, else provide the id of the cell after which a new cell is to be inserted. Remember, if a cellId is provided and editType=insert, then a cell will be inserted after the cell with the provided cellId."
                      },
                      "newCode": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "The code for the new or existing cell to be edited. Code should not be wrapped within <VSCode.Cell> tags. Do NOT include code markers such as (...existing code...) to indicate existing code."
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "The code for the new or existing cell to be edited. Code should not be wrapped within <VSCode.Cell> tags"
                            }
                          }
                        ]
                      },
                      "language": {
                        "type": "string",
                        "description": "The language of the cell. `markdown`, `python`, `javascript`, `julia`, etc."
                      },
                      "editType": {
                        "type": "string",
                        "enum": [
                          "insert",
                          "delete",
                          "edit"
                        ],
                        "description": "The operation peformed on the cell, whether `insert`, `delete` or `edit`.\nUse the `editType` field to specify the operation: `insert` to add a new cell, `edit` to modify an existing cell's content, and `delete` to remove a cell."
                      }
                    },
                    "required": [
                      "filePath",
                      "editType",
                      "cellId"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "fetch_webpage",
                  "description": "Fetches the main content from a web page. This tool is useful for summarizing or analyzing the content of a webpage. You should use this tool when you think the user is looking for information from a specific webpage.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "urls": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "An array of URLs to fetch content from."
                      },
                      "query": {
                        "type": "string",
                        "description": "The query to search for in the web page's content. This should be a clear and concise description of the content you want to find."
                      }
                    },
                    "required": [
                      "urls",
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "file_search",
                  "description": "Search for files in the workspace by glob pattern. This only returns the paths of matching files. Use this tool when you know the exact filename pattern of the files you're searching for. Glob patterns match from the root of the workspace folder. Examples:\n- **/*.{js,ts} to match all js/ts files in the workspace.\n- src/** to match all files under the top-level src folder.\n- **/foo/**/*.js to match all js files under any foo folder in the workspace.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "Search for files with names or paths matching this glob pattern."
                      },
                      "maxResults": {
                        "type": "number",
                        "description": "The maximum number of results to return. Do not use this unless necessary, it can slow things down. By default, only some matches are returned. If you use this and don't see what you're looking for, you can try again with a more specific query or a larger maxResults."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "grep_search",
                  "description": "Do a fast text search in the workspace. Use this tool when you want to search with an exact string or regex. If you are not sure what words will appear in the workspace, prefer using regex patterns with alternation (|) or character classes to search for multiple potential words at once instead of making separate searches. For example, use 'function|method|procedure' to look for all of those words at once. Use includePattern to search within files matching a specific pattern, or in a specific file, using a relative path. Use this tool when you want to see an overview of a particular file, instead of using read_file many times to look for code within a file.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The pattern to search for in files in the workspace. Use regex with alternation (e.g., 'word1|word2|word3') or character classes to find multiple potential words in a single search. Be sure to set the isRegexp property properly to declare whether it's a regex or plain text pattern. Is case-insensitive."
                      },
                      "isRegexp": {
                        "type": "boolean",
                        "description": "Whether the pattern is a regex."
                      },
                      "includePattern": {
                        "type": "string",
                        "description": "Search files matching this glob pattern. Will be applied to the relative path of files within the workspace. To search recursively inside a folder, use a proper glob pattern like \"src/folder/**\". Do not use | in includePattern."
                      },
                      "maxResults": {
                        "type": "number",
                        "description": "The maximum number of results to return. Do not use this unless necessary, it can slow things down. By default, only some matches are returned. If you use this and don't see what you're looking for, you can try again with a more specific query or a larger maxResults."
                      }
                    },
                    "required": [
                      "query",
                      "isRegexp"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_changed_files",
                  "description": "Get git diffs of current file changes in a git repository. Don't forget that you can use run_in_terminal to run git commands in a terminal as well.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repositoryPath": {
                        "type": "string",
                        "description": "The absolute path to the git repository to look for changes in. If not provided, the active git repository will be used."
                      },
                      "sourceControlState": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "staged",
                            "unstaged",
                            "merge-conflicts"
                          ]
                        },
                        "description": "The kinds of git state to filter by. Allowed values are: 'staged', 'unstaged', and 'merge-conflicts'. If not provided, all states will be included."
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_errors",
                  "description": "Get any compile or lint errors in a specific file or across all files. If the user mentions errors or problems in a file, they may be referring to these. Use the tool to see the same errors that the user is seeing. If the user asks you to analyze all errors, or does not specify a file, use this tool to gather errors for all files. Also use this tool after editing a file to validate the change.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePaths": {
                        "description": "The absolute paths to the files or folders to check for errors. Omit 'filePaths' when retrieving all errors.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "copilot_getNotebookSummary",
                  "description": "This is a tool returns the list of the Notebook cells along with the id, cell types, line ranges, language, execution information and output mime types for each cell. This is useful to get Cell Ids when executing a notebook or determine what cells have been executed and what order, or what cells have outputs. If required to read contents of a cell use this to determine the line range of a cells, and then use read_file tool to read a specific line range. Requery this tool if the contents of the notebook change.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb"
                      }
                    },
                    "required": [
                      "filePath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_project_setup_info",
                  "description": "Do not call this tool without first calling the tool to create a workspace. This tool provides a project setup information for a Visual Studio Code workspace based on a project type and programming language.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "projectType": {
                        "type": "string",
                        "description": "The type of project to create. Supported values are: 'python-script', 'python-project', 'mcp-server', 'model-context-protocol-server', 'vscode-extension', 'next-js', 'vite' and 'other'"
                      }
                    },
                    "required": [
                      "projectType"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_search_view_results",
                  "description": "The results from the search view"
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_vscode_api",
                  "description": "Get comprehensive VS Code API documentation and references for extension development. This tool provides authoritative documentation for VS Code's extensive API surface, including proposed APIs, contribution points, and best practices. Use this tool for understanding complex VS Code API interactions.\n\nWhen to use this tool:\n- User asks about specific VS Code APIs, interfaces, or extension capabilities\n- Need documentation for VS Code extension contribution points (commands, views, settings, etc.)\n- Questions about proposed APIs and their usage patterns\n- Understanding VS Code extension lifecycle, activation events, and packaging\n- Best practices for VS Code extension development architecture\n- API examples and code patterns for extension features\n- Troubleshooting extension-specific issues or API limitations\n\nWhen NOT to use this tool:\n- Creating simple standalone files or scripts unrelated to VS Code extensions\n- General programming questions not specific to VS Code extension development\n- Questions about using VS Code as an editor (user-facing features)\n- Non-extension related development tasks\n- File creation or editing that doesn't involve VS Code extension APIs\n\nCRITICAL usage guidelines:\n1. Always include specific API names, interfaces, or concepts in your query\n2. Mention the extension feature you're trying to implement\n3. Include context about proposed vs stable APIs when relevant\n4. Reference specific contribution points when asking about extension manifest\n5. Be specific about the VS Code version or API version when known\n\nScope: This tool is for EXTENSION DEVELOPMENT ONLY - building tools that extend VS Code itself, not for general file creation or non-extension programming tasks.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to search vscode documentation for. Should contain all relevant context."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github_repo",
                  "description": "Searches a GitHub repository for relevant source code snippets. Only use this tool if the user is very clearly asking for code snippets from a specific GitHub repository. Do not use this tool for Github repos that the user has open in their workspace.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "string",
                        "description": "The name of the Github repository to search for code in. Should must be formatted as '<owner>/<repo>'."
                      },
                      "query": {
                        "type": "string",
                        "description": "The query to search for repo. Should contain all relevant context."
                      }
                    },
                    "required": [
                      "repo",
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "install_extension",
                  "description": "Install an extension in VS Code. Use this tool to install an extension in Visual Studio Code as part of a new workspace creation process only.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the extension to install. This should be in the format <publisher>.<extension>."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the extension to install. This should be a clear and concise description of the extension."
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "list_code_usages",
                  "description": "Request to list all usages (references, definitions, implementations etc) of a function, class, method, variable etc. Use this tool when \n1. Looking for a sample implementation of an interface or class\n2. Checking how a function is used throughout the codebase.\n3. Including and updating all usages when changing a function, method, or constructor",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "symbolName": {
                        "type": "string",
                        "description": "The name of the symbol, such as a function name, class name, method name, variable name, etc."
                      },
                      "filePaths": {
                        "type": "array",
                        "description": "One or more file paths which likely contain the definition of the symbol. For instance the file which declares a class or function. This is optional but will speed up the invocation of this tool and improve the quality of its output.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "symbolName"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "list_dir",
                  "description": "List the contents of a directory. Result will have the name of the child. If the name ends in /, it's a folder, otherwise a file",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "description": "The absolute path to the directory to list."
                      }
                    },
                    "required": [
                      "path"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "multi_replace_string_in_file",
                  "description": "This tool allows you to apply multiple replace_string_in_file operations in a single call, which is more efficient than calling replace_string_in_file multiple times. It takes an array of replacement operations and applies them sequentially. Each replacement operation has the same parameters as replace_string_in_file: filePath, oldString, newString, and explanation. This tool is ideal when you need to make multiple edits across different files or multiple edits in the same file. The tool will provide a summary of successful and failed operations.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "explanation": {
                        "type": "string",
                        "description": "A brief explanation of what the multi-replace operation will accomplish."
                      },
                      "replacements": {
                        "type": "array",
                        "description": "An array of replacement operations to apply sequentially.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "explanation": {
                              "type": "string",
                              "description": "A brief explanation of this specific replacement operation."
                            },
                            "filePath": {
                              "type": "string",
                              "description": "An absolute path to the file to edit."
                            },
                            "oldString": {
                              "type": "string",
                              "description": "The exact literal text to replace, preferably unescaped. Include at least 3 lines of context BEFORE and AFTER the target text, matching whitespace and indentation precisely. If this string is not the exact literal text or does not match exactly, this replacement will fail."
                            },
                            "newString": {
                              "type": "string",
                              "description": "The exact literal text to replace `oldString` with, preferably unescaped. Provide the EXACT text. Ensure the resulting code is correct and idiomatic."
                            }
                          },
                          "required": [
                            "explanation",
                            "filePath",
                            "oldString",
                            "newString"
                          ]
                        },
                        "minItems": 1
                      }
                    },
                    "required": [
                      "explanation",
                      "replacements"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "open_simple_browser",
                  "description": "Preview a website or open a URL in the editor's Simple Browser. Useful for quickly viewing locally hosted websites, demos, or resources without leaving the coding environment.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "The website URL to preview or open in the Simple Browser inside the editor. Must be either an http or https URL"
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "read_file",
                  "description": "Read the contents of a file. Line numbers are 1-indexed. This tool will truncate its output at 2000 lines and may be called repeatedly with offset and limit parameters to read larger files in chunks.",
                  "parameters": {
                    "type": "object",
                    "required": [
                      "filePath"
                    ],
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the file to read.",
                        "type": "string"
                      },
                      "offset": {
                        "description": "Optional: the 1-based line number to start reading from. Only use this if the file is too large to read at once. If not specified, the file will be read from the beginning.",
                        "type": "number"
                      },
                      "limit": {
                        "description": "Optional: the maximum number of lines to read. Only use this together with `offset` if the file is too large to read at once.",
                        "type": "number"
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "read_notebook_cell_output",
                  "description": "This tool will retrieve the output for a notebook cell from its most recent execution or restored from disk. The cell may have output even when it has not been run in the current kernel session. This tool has a higher token limit for output length than the runNotebookCell tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb"
                      },
                      "cellId": {
                        "type": "string",
                        "description": "The ID of the cell for which output should be retrieved."
                      }
                    },
                    "required": [
                      "filePath",
                      "cellId"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "replace_string_in_file",
                  "description": "This is a tool for making edits in an existing file in the workspace. For moving or renaming files, use run in terminal tool with the 'mv' command instead. For larger edits, split them into smaller edits and call the edit tool multiple times to ensure accuracy. Before editing, always ensure you have the context to understand the file's contents and context. To edit a file, provide: 1) filePath (absolute path), 2) oldString (MUST be the exact literal text to replace including all whitespace, indentation, newlines, and surrounding code etc), and 3) newString (MUST be the exact literal text to replace \\`oldString\\` with (also including all whitespace, indentation, newlines, and surrounding code etc.). Ensure the resulting code is correct and idiomatic.). Each use of this tool replaces exactly ONE occurrence of oldString.\n\nCRITICAL for \\`oldString\\`: Must uniquely identify the single instance to change. Include at least 3 lines of context BEFORE and AFTER the target text, matching whitespace and indentation precisely. If this string matches multiple locations, or does not match exactly, the tool will fail. Never use 'Lines 123-456 omitted' from summarized documents or ...existing code... comments in the oldString or newString.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the file to edit."
                      },
                      "oldString": {
                        "type": "string",
                        "description": "The exact literal text to replace, preferably unescaped. For single replacements (default), include at least 3 lines of context BEFORE and AFTER the target text, matching whitespace and indentation precisely. For multiple replacements, specify expected_replacements parameter. If this string is not the exact literal text (i.e. you escaped it) or does not match exactly, the tool will fail."
                      },
                      "newString": {
                        "type": "string",
                        "description": "The exact literal text to replace `old_string` with, preferably unescaped. Provide the EXACT text. Ensure the resulting code is correct and idiomatic."
                      }
                    },
                    "required": [
                      "filePath",
                      "oldString",
                      "newString"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_notebook_cell",
                  "description": "This is a tool for running a code cell in a notebook file directly in the notebook editor. The output from the execution will be returned. Code cells should be run as they are added or edited when working through a problem to bring the kernel state up to date and ensure the code executes successfully. Code cells are ready to run and don't require any pre-processing. If asked to run the first cell in a notebook, you should run the first code cell since markdown cells cannot be executed. NOTE: Avoid executing Markdown cells or providing Markdown cell IDs, as Markdown cells cannot be  executed.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb"
                      },
                      "reason": {
                        "type": "string",
                        "description": "An optional explanation of why the cell is being run. This will be shown to the user before the tool is run and is not necessary if it's self-explanatory."
                      },
                      "cellId": {
                        "type": "string",
                        "description": "The ID for the code cell to execute. Avoid providing markdown cell IDs as nothing will be executed."
                      },
                      "continueOnError": {
                        "type": "boolean",
                        "description": "Whether or not execution should continue for remaining cells if an error is encountered. Default to false unless instructed otherwise."
                      }
                    },
                    "required": [
                      "filePath",
                      "cellId"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_vscode_command",
                  "description": "Run a command in VS Code. Use this tool to run a command in Visual Studio Code as part of a new workspace creation process only.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "commandId": {
                        "type": "string",
                        "description": "The ID of the command to execute. This should be in the format <command>."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the command to execute. This should be a clear and concise description of the command."
                      },
                      "args": {
                        "type": "array",
                        "description": "The arguments to pass to the command. This should be an array of strings.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "commandId",
                      "name"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "semantic_search",
                  "description": "Run a natural language search for relevant code or documentation comments from the user's current workspace. Returns relevant code snippets from the user's current workspace if it is large, or the full contents of the workspace if it is small.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to search the codebase for. Should contain all relevant context. Should ideally be text that might appear in the codebase, such as function names, variable names, or comments."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "test_failure",
                  "description": "Includes test failure information in the prompt."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "vscode_searchExtensions_internal",
                  "description": "This is a tool for browsing Visual Studio Code Extensions Marketplace. It allows the model to search for extensions and retrieve detailed information about them. The model should use this tool whenever it needs to discover extensions or resolve information about known ones. To use the tool, the model has to provide the category of the extensions, relevant search keywords, or known extension IDs. Note that search results may include false positives, so reviewing and filtering is recommended.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "description": "The category of extensions to search for",
                        "enum": [
                          "AI",
                          "Azure",
                          "Chat",
                          "Data Science",
                          "Debuggers",
                          "Extension Packs",
                          "Education",
                          "Formatters",
                          "Keymaps",
                          "Language Packs",
                          "Linters",
                          "Machine Learning",
                          "Notebooks",
                          "Programming Languages",
                          "SCM Providers",
                          "Snippets",
                          "Testing",
                          "Themes",
                          "Visualization",
                          "Other"
                        ]
                      },
                      "keywords": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The keywords to search for"
                      },
                      "ids": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The ids of the extensions to search for"
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_and_run_task",
                  "description": "Creates and runs a build, run, or custom task for the workspace by generating or adding to a tasks.json file based on the project structure (such as package.json or README.md). If the user asks to build, run, launch and they have no tasks.json file, use this tool. If they ask to create or add a task, use this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceFolder": {
                        "type": "string",
                        "description": "The absolute path of the workspace folder where the tasks.json file will be created."
                      },
                      "task": {
                        "type": "object",
                        "description": "The task to add to the new tasks.json file.",
                        "properties": {
                          "label": {
                            "type": "string",
                            "description": "The label of the task."
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the task. The only supported value is 'shell'.",
                            "enum": [
                              "shell"
                            ]
                          },
                          "command": {
                            "type": "string",
                            "description": "The shell command to run for the task. Use this to specify commands for building or running the application."
                          },
                          "args": {
                            "type": "array",
                            "description": "The arguments to pass to the command.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "isBackground": {
                            "type": "boolean",
                            "description": "Whether the task runs in the background without blocking the UI or other tasks. Set to true for long-running processes like watch tasks or servers that should continue executing without requiring user attention. When false, the task will block the terminal until completion."
                          },
                          "problemMatcher": {
                            "type": "array",
                            "description": "The problem matcher to use to parse task output for errors and warnings. Can be a predefined matcher like '$tsc' (TypeScript), '$eslint - stylish', '$gcc', etc., or a custom pattern defined in tasks.json. This helps VS Code display errors in the Problems panel and enables quick navigation to error locations.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "group": {
                            "type": "string",
                            "description": "The group to which the task belongs."
                          }
                        },
                        "required": [
                          "label",
                          "type",
                          "command"
                        ]
                      }
                    },
                    "required": [
                      "task",
                      "workspaceFolder"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_task_output",
                  "description": "Get the output of a task",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The task ID for which to get the output."
                      },
                      "workspaceFolder": {
                        "type": "string",
                        "description": "The workspace folder path containing the task"
                      }
                    },
                    "required": [
                      "id",
                      "workspaceFolder"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_terminal_output",
                  "description": "Get the output of a terminal command previously started with run_in_terminal",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the terminal to check."
                      }
                    },
                    "required": [
                      "id"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "manage_todo_list",
                  "description": "Manage a structured todo list to track progress and plan tasks throughout your coding session. Use this tool VERY frequently to ensure task visibility and proper planning.\n\nWhen to use this tool:\n- Complex multi-step work requiring planning and tracking\n- When user provides multiple tasks or requests (numbered/comma-separated)\n- After receiving new instructions that require multiple steps\n- BEFORE starting work on any todo (mark as in-progress)\n- IMMEDIATELY after completing each todo (mark completed individually)\n- When breaking down larger tasks into smaller actionable steps\n- To give users visibility into your progress and planning\n\nWhen NOT to use:\n- Single, trivial tasks that can be completed in one step\n- Purely conversational/informational requests\n- When just reading files or performing simple searches\n\nCRITICAL workflow:\n1. Plan tasks by writing todo list with specific, actionable items\n2. Mark ONE todo as in-progress before starting work\n3. Complete the work for that specific todo\n4. Mark that todo as completed IMMEDIATELY\n5. Move to next todo and repeat\n\nTodo states:\n- not-started: Todo not yet begun\n- in-progress: Currently working (limit ONE at a time)\n- completed: Finished successfully\n\nIMPORTANT: Mark todos completed as soon as they are done. Do not batch completions.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "todoList": {
                        "type": "array",
                        "description": "Complete array of all todo items (required for write operation, ignored for read). Must include ALL items - both existing and new.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number",
                              "description": "Unique identifier for the todo. Use sequential numbers starting from 1."
                            },
                            "title": {
                              "type": "string",
                              "description": "Concise action-oriented todo label (3-7 words). Displayed in UI."
                            },
                            "description": {
                              "type": "string",
                              "description": "Detailed context, requirements, or implementation notes. Include file paths, specific methods, or acceptance criteria."
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "not-started",
                                "in-progress",
                                "completed"
                              ],
                              "description": "not-started: Not begun | in-progress: Currently working (max 1) | completed: Fully finished with no blockers"
                            }
                          },
                          "required": [
                            "id",
                            "title",
                            "description",
                            "status"
                          ]
                        }
                      },
                      "operation": {
                        "type": "string",
                        "enum": [
                          "write",
                          "read"
                        ],
                        "description": "write: Replace entire todo list with new content. read: Retrieve current todo list. ALWAYS provide complete list when writing - partial updates not supported."
                      }
                    },
                    "required": [
                      "operation"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_in_terminal",
                  "description": "This tool allows you to execute PowerShell commands in a persistent terminal session, preserving environment variables, working directory, and other context across multiple commands.\n\nCommand Execution:\n- Use semicolons ; to chain commands on one line, NEVER use && even when asked explicitly\n- Prefer pipelines | for object-based data flow\n- Never create a sub-shell (eg. powershell -c \"command\") unless explicitly asked\n\nDirectory Management:\n- Must use absolute paths to avoid navigation issues\n- Use $PWD or Get-Location for current directory\n- Use Push-Location/Pop-Location for directory stack\n\nProgram Execution:\n- Supports .NET, Python, Node.js, and other executables\n- Install modules via Install-Module, Install-Package\n- Use Get-Command to verify cmdlet/function availability\n\nBackground Processes:\n- For long-running tasks (e.g., servers), set isBackground=true\n- Returns a terminal ID for checking status and runtime later\n- Use Start-Job for background PowerShell jobs\n\nOutput Management:\n- Output is automatically truncated if longer than 60KB to prevent context overflow\n- Use Select-Object, Where-Object, Format-Table to filter output\n- Use -First/-Last parameters to limit results\n- For pager commands, add | Out-String or | Format-List\n\nBest Practices:\n- Use proper cmdlet names instead of aliases in scripts\n- Quote paths with spaces: \"C:\\Path With Spaces\"\n- Prefer PowerShell cmdlets over external commands when available\n- Prefer idiomatic PowerShell like Get-ChildItem instead of dir or ls for file listings\n- Use Test-Path to check file/directory existence\n- Be specific with Select-Object properties to avoid excessive output",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "command": {
                        "type": "string",
                        "description": "The command to run in the terminal."
                      },
                      "explanation": {
                        "type": "string",
                        "description": "A one-sentence description of what the command does. This will be shown to the user before the command is run."
                      },
                      "isBackground": {
                        "type": "boolean",
                        "description": "Whether the command starts a background process. If true, the command will run in the background and you will not see the output. If false, the tool call will block on the command finishing, and then you will get the output. Examples of background processes: building in watch mode, starting a server. You can check the output of a background process later on by using get_terminal_output."
                      }
                    },
                    "required": [
                      "command",
                      "explanation",
                      "isBackground"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_task",
                  "description": "Runs a VS Code task.\n\n- If you see that an appropriate task exists for building or running code, prefer to use this tool to run the task instead of using the run_in_terminal tool.\n- Make sure that any appropriate build or watch task is running before trying to run tests or execute code.\n- If the user asks to run a task, use this tool to do so.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceFolder": {
                        "type": "string",
                        "description": "The workspace folder path containing the task"
                      },
                      "id": {
                        "type": "string",
                        "description": "The task ID to run."
                      }
                    },
                    "required": [
                      "workspaceFolder",
                      "id"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "runSubagent",
                  "description": "Launch a new agent to handle complex, multi-step tasks autonomously. This tool is good at researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries, use this agent to perform the search for you.\n\n- Agents do not run async or in the background, you will wait for the agent's result.\n- When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n - Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n - The agent's outputs should generally be trusted\n - Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "prompt": {
                        "type": "string",
                        "description": "A detailed description of the task for the agent to perform"
                      },
                      "description": {
                        "type": "string",
                        "description": "A short (3-5 word) description of the task"
                      }
                    },
                    "required": [
                      "prompt",
                      "description"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "runTests",
                  "description": "Runs unit tests in files. Use this tool if the user asks to run tests or when you want to validate changes using unit tests, and prefer using this tool instead of the terminal tool. When possible, always try to provide `files` paths containing the relevant unit tests in order to avoid unnecessarily long test runs. This tool outputs detailed information about the results of the test run. Set mode=\"coverage\" to also collect coverage and optionally provide coverageFiles for focused reporting.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Absolute paths to the test files to run. If not provided, all test files will be run."
                      },
                      "testNames": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "An array of test names to run. Depending on the context, test names defined in code may be strings or the names of functions or classes containing the test cases. If not provided, all tests in the files will be run."
                      },
                      "mode": {
                        "type": "string",
                        "enum": [
                          "run",
                          "coverage"
                        ],
                        "description": "Execution mode: \"run\" (default) runs tests normally, \"coverage\" collects coverage."
                      },
                      "coverageFiles": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "When mode=\"coverage\": absolute file paths to include detailed coverage info for. Only the first matching file will be summarized."
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "terminal_last_command",
                  "description": "Get the last command run in the active terminal."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "terminal_selection",
                  "description": "Get the current selection in the active terminal."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "notebook_install_packages",
                  "description": "Install a list of packages on a notebook kernel to be used within that notebook. This tool should be used when working with a jupyter notebook with python code cells. Do not use this tool if not already working with a notebook, or for a language other than python. If the tool configure_notebooks exists, then ensure to call configure_notebooks before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the notebook with the active kernel.",
                        "type": "string"
                      },
                      "packageList": {
                        "description": "A list of packages to install.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "filePath",
                      "packageList"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "notebook_list_packages",
                  "description": "List the installed packages that are currently available in the selected kernel for a notebook editor. This tool should be used when working with a jupyter notebook with python code cells. Do not use this tool if not already working with a notebook, or for a language other than python. If the tool configure_notebooks exists, then ensure to call configure_notebooks before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the notebook with the active kernel.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "filePath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_python_environment_details",
                  "description": "This tool will retrieve the details of the Python Environment for the specified file or workspace. The details returned include the 1. Type of Python Environment (conda, venv, etec), 2. Version of Python, 3. List of all installed Python packages with their versions. ALWAYS call configure_python_environment before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace to get the environment information for."
                      }
                    },
                    "required": []
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_python_executable_details",
                  "description": "This tool will retrieve the details of the Python Environment for the specified file or workspace. ALWAYS use this tool before executing any Python command in the terminal. This tool returns the details of how to construct the fully qualified path and or command including details such as arguments required to run Python in a terminal. Note: Instead of executing `python --version` or `python -c 'import sys; print(sys.executable)'`, use this tool to get the Python executable path to replace the `python` command. E.g. instead of using `python -c 'import sys; print(sys.executable)'`, use this tool to build the command `conda run -n <env_name> -c 'import sys; print(sys.executable)'`. ALWAYS call configure_python_environment before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace to get the executable information for. If not provided, the current workspace will be used. Where possible pass the path to the file or workspace."
                      }
                    },
                    "required": []
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "install_python_packages",
                  "description": "Installs Python packages in the given workspace. Use this tool to install Python packages in the user's chosen Python environment. ALWAYS call configure_python_environment before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "packageList": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The list of Python packages to install."
                      },
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace into which the packages are installed. If not provided, the current workspace will be used. Where possible pass the path to the file or workspace."
                      }
                    },
                    "required": [
                      "packageList"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "evaluateExpressionInDebugSession",
                  "description": "Evaluate an expression in a specific debug session",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "debugSessionId": {
                        "type": "number",
                        "description": "The ID of the debug session to evaluate the expression in"
                      },
                      "expression": {
                        "type": "string",
                        "description": "The expression to evaluate in the debug session"
                      }
                    },
                    "required": [
                      "debugSessionId",
                      "expression"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "listDebugSessions",
                  "description": "List all active debug sessions with their IDs, names, and expression language IDs",
                  "parameters": {
                    "type": "object",
                    "properties": {}
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_activePullRequest",
                  "description": "Get comprehensive information about the active GitHub pull request (PR). The active PR is the one that is currently checked out. This includes the PR title, full description, list of changed files, review comments, PR state, and status checks/CI results. For PRs created by Copilot, it also includes the session logs which indicate the development process and decisions made by the coding agent. When asked about the active or current pull request, do this first! Use this tool for any request related to \"current changes,\" \"pull request details,\" \"what changed,\" \"PR status,\" or similar queries even if the user does not explicitly mention \"pull request.\" When asked to use this tool, ALWAYS use it."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_copilot-coding-agent",
                  "description": "Completes the provided task using an asynchronous coding agent. Use when the user wants copilot continue completing a task in the background or asynchronously. IMPORTANT: Use this tool LAST/FINAL when users mention '#github-pull-request_copilot-coding-agent' in their query. This indicates they want the task/job implemented by the remote coding agent after all other analysis, planning, and preparation is complete. Call this tool at the END to hand off the fully-scoped task to the asynchronous GitHub Copilot coding agent. The agent will create a new branch, implement the changes, and open a pull request. Always use this tool as the final step when the hashtag is mentioned, after completing any other necessary tools or analysis first.",
                  "parameters": {
                    "type": "object",
                    "required": [
                      "title",
                      "body"
                    ],
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "The title of the issue. Populate from chat context."
                      },
                      "body": {
                        "type": "string",
                        "description": "The body/description of the issue. Populate from chat context."
                      },
                      "existingPullRequest": {
                        "type": "number",
                        "description": "The number of an existing pull request related to the current coding agent task. Look in the chat history for this number.  In the chat it may look like 'Coding agent will continue work in #17...'. In this example, you should return '17'."
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_doSearch",
                  "description": "Execute a GitHub search given a well formed GitHub search query. Call github-pull-request_formSearchQuery first to get good search syntax and pass the exact result in as the 'query'.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "query": {
                        "type": "string",
                        "description": "A well formed GitHub search query using proper GitHub search syntax."
                      }
                    },
                    "required": [
                      "query",
                      "repo"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_formSearchQuery",
                  "description": "Converts natural language to a GitHub search query. Should ALWAYS be called before doing a search.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "naturalLanguageString": {
                        "type": "string",
                        "description": "A plain text description of what the search should be."
                      }
                    },
                    "required": [
                      "naturalLanguageString"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_issue_fetch",
                  "description": "Get a GitHub issue/PR's details as a JSON object.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue/PR from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue/PR from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue/PR from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "issueNumber": {
                        "type": "number",
                        "description": "The number of the issue/PR to get."
                      }
                    },
                    "required": [
                      "issueNumber"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_openPullRequest",
                  "description": "Get comprehensive information about the GitHub pull request (PR) which is currently visible, but not necessarily checked out. This includes the PR title, full description, list of changed files, review comments, PR state, and status checks/CI results. For PRs created by Copilot, it also includes the session logs which indicate the development process and decisions made by the coding agent. When asked about the currently open pull request, do this first! Use this tool for any request related to \"pull request details,\" \"what changed,\" \"PR status,\" or similar queries even if the user does not explicitly mention \"pull request.\" When asked to use this tool, ALWAYS use it."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_renderIssues",
                  "description": "Render issue items from an issue search in a markdown table. The markdown table will be displayed directly to the user by the tool. No further display should be done after this!",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "arrayOfIssues": {
                        "type": "array",
                        "description": "An array of GitHub Issues.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "The title of the issue."
                            },
                            "number": {
                              "type": "number",
                              "description": "The number of the issue."
                            },
                            "url": {
                              "type": "string",
                              "description": "The URL of the issue."
                            },
                            "state": {
                              "type": "string",
                              "description": "The state of the issue (open/closed)."
                            },
                            "createdAt": {
                              "type": "string",
                              "description": "The creation date of the issue."
                            },
                            "updatedAt": {
                              "type": "string",
                              "description": "The last update date of the issue."
                            },
                            "closedAt": {
                              "type": "string",
                              "description": "The closing date of the issue."
                            },
                            "author": {
                              "type": "object",
                              "description": "The author of the issue.",
                              "properties": {
                                "login": {
                                  "type": "string",
                                  "description": "The login of the author."
                                },
                                "url": {
                                  "type": "string",
                                  "description": "The URL of the author's profile."
                                }
                              }
                            },
                            "labels": {
                              "type": "array",
                              "description": "The labels associated with the issue.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the label."
                                  },
                                  "color": {
                                    "type": "string",
                                    "description": "The color of the label."
                                  }
                                }
                              }
                            },
                            "assignees": {
                              "type": "array",
                              "description": "The assignees of the issue.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "login": {
                                    "type": "string",
                                    "description": "The login of the assignee."
                                  },
                                  "url": {
                                    "type": "string",
                                    "description": "The URL of the assignee's profile."
                                  }
                                }
                              }
                            },
                            "commentsCount": {
                              "type": "number",
                              "description": "The number of comments on the issue."
                            }
                          },
                          "required": [
                            "title",
                            "number",
                            "url",
                            "state",
                            "createdAt",
                            "author"
                          ]
                        }
                      },
                      "totalIssues": {
                        "type": "number",
                        "description": "The total number of issues in the search."
                      }
                    },
                    "required": [
                      "arrayOfIssues",
                      "totalIssues"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_suggest-fix",
                  "description": "Summarize and suggest a fix for a GitHub issue.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "issueNumber": {
                        "type": "number",
                        "description": "The number of the issue to get."
                      }
                    },
                    "required": [
                      "issueNumber",
                      "repo"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "kustoSchema",
                  "description": "Returns the Schema of a Kusto Database (including table, column, function names and more). Always use this tool when generating Kusto KQL queries without making assumptions about the available tables, columns and functions."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceInstalledTopLevelModules",
                  "description": "Get available top-level modules from installed Python packages in environment. Shows what can be imported. Use for: checking if packages are installed, verifying import availability, helping users understand available modules.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "pythonEnvironment": {
                        "type": "string",
                        "description": "The Python environment to use. Must be a value returned by the pylancePythonEnvironments tool. If pythonEnvironment is missing, the python environment of the workspace will be used."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceInvokeRefactoring",
                  "description": "Apply automated code refactoring to Python files. Returns refactored content (does not modify original file) unless mode is \"update\". Use for: extracting functions, organizing imports, improving code structure, applying refactoring patterns.  Optional \"mode\" parameter: \"update\" updates the file, \"edits\" returns a WorkspaceEdit, \"string\" returns updated content as string. If mode is not specified, \"update\" will be used as the default. The \"edits\" mode is helpful for determining if a file needs changes (for example, to remove unused imports or fix import formatting) without making any modifications; if no changes are needed, the result will be either an empty WorkspaceEdit or a message indicating that no text edits were found. Available refactorings: source.unusedImports: - Removes all unused import statements from a Python file. Use when imports are imported but never referenced in the code. Requires fileUri parameter pointing to a Python file with unused imports.\nsource.convertImportFormat: - Converts import statements between absolute and relative formats according to python.analysis.importFormat setting. Use when import format consistency is needed. Requires fileUri parameter pointing to a Python file with imports to convert.\nsource.fixAll.pylance: - Applies all available automatic code fixes from python.analysis.fixAll setting. Use when multiple code issues need to be addressed simultaneously. Requires fileUri parameter pointing to a Python file with fixable issues.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "fileUri": {
                        "type": "string",
                        "description": "The uri of the file to invoke the refactoring."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the refactoring to invoke. This must be one of these [source.unusedImports, source.convertImportFormat, source.fixAll.pylance]"
                      },
                      "mode": {
                        "type": "string",
                        "enum": [
                          "update",
                          "edits",
                          "string"
                        ],
                        "description": "Determines the output mode: \"update\" updates the file directly, \"edits\" returns a WorkspaceEdit, \"string\" returns the updated content as a string. If omitted, \"update\" will be used as the default. The \"edits\" mode is especially useful for checking if any changes are needed (such as unused imports or import formatting issues) without modifying the file, as it will return a WorkspaceEdit only if edits are required."
                      }
                    },
                    "required": [
                      "fileUri",
                      "name"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylancePythonEnvironments",
                  "description": "Get Python environment information for workspace: current active environment and all available environments. Use for: Python environment issues, switching environments, understanding Python setup.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceSettings",
                  "description": "Get current Python analysis settings and configuration for a workspace. Returns all \"python.analysis.*\" settings with default vs user-configured indicators. Use for: troubleshooting configuration, checking current settings, diagnosing analysis issues.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceUpdatePythonEnvironment",
                  "description": "Switch active Python environment for workspace to different Python installation or virtual environment. Updates settings and ensures subsequent operations use new environment. Use for: changing Python versions, switching to virtual environments, resolving environment issues.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "pythonEnvironment": {
                        "type": "string",
                        "description": "The Python environment to use. Must be either a value returned by the pylancePythonEnvironments tool or the absolute path to a Python executable."
                      }
                    },
                    "required": [
                      "workspaceRoot",
                      "pythonEnvironment"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              }
            ]
          },
          "requestMessages": {
            "messages": [
              {
                "role": 0,
                "content": [
                  {
                    "type": 1,
                    "text": "You are an expert AI programming assistant, working with a user in the VS Code editor.\nWhen asked for your name, you must respond with \"GitHub Copilot\". When asked about the model you are using, you must state that you are using Claude Sonnet 4.5.\nFollow the user's requirements carefully & to the letter.\nFollow Microsoft content policies.\nAvoid content that violates copyrights.\nIf you are asked to generate content that is harmful, hateful, racist, sexist, lewd, or violent, only respond with \"Sorry, I can't assist with that.\"\nKeep your answers short and impersonal.\n<instructions>\nYou are a highly sophisticated automated coding agent with expert-level knowledge across many different programming languages and frameworks and software engineering tasks - this encompasses debugging issues, implementing new features, restructuring code, and providing code explanations, among other engineering activities.\nThe user will ask a question, or ask you to perform a task, and it may require lots of research to answer correctly. There is a selection of tools that let you perform actions or retrieve helpful context to answer the user's question.\nBy default, implement changes rather than only suggesting them. If the user's intent is unclear, infer the most useful likely action and proceed with using tools to discover any missing details instead of guessing. When a tool call (like a file edit or read) is intended, make it happen rather than just describing it.\nYou can call tools repeatedly to take actions or gather as much context as needed until you have completed the task fully. Don't give up unless you are sure the request cannot be fulfilled with the tools you have. It's YOUR RESPONSIBILITY to make sure that you have done all you can to collect necessary context.\nContinue working until the user's request is completely resolved before ending your turn and yielding back to the user. Only terminate your turn when you are certain the task is complete. Do not stop or hand back to the user when you encounter uncertainty — research or deduce the most reasonable approach and continue.\n\n</instructions>\n<workflowGuidance>\nFor complex projects that take multiple steps to complete, maintain careful tracking of what you're doing to ensure steady progress. Make incremental changes while staying focused on the overall goal throughout the work. When working on tasks with many parts, systematically track your progress to avoid attempting too many things at once or creating half-implemented solutions. Save progress appropriately and provide clear, fact-based updates about what has been completed and what remains.\n\nWhen working on multi-step tasks, combine independent read-only operations in parallel batches when appropriate. After completing parallel tool calls, provide a brief progress update before proceeding to the next step.\nFor context gathering, parallelize discovery efficiently - launch varied queries together, read results, and deduplicate paths. Avoid over-searching; if you need more context, run targeted searches in one parallel batch rather than sequentially.\nGet enough context quickly to act, then proceed with implementation. Balance thorough understanding with forward momentum.\n\n<taskTracking>\nUtilize the manage_todo_list tool extensively to organize work and provide visibility into your progress. This is essential for planning and ensures important steps aren't forgotten.\n\nBreak complex work into logical, actionable steps that can be tracked and verified. Update task status consistently throughout execution using the manage_todo_list tool:\n- Mark tasks as in-progress when you begin working on them\n- Mark tasks as completed immediately after finishing each one - do not batch completions\n\nTask tracking is valuable for:\n- Multi-step work requiring careful sequencing\n- Breaking down ambiguous or complex requests\n- Maintaining checkpoints for feedback and validation\n- When users provide multiple requests or numbered tasks\n\nSkip task tracking for simple, single-step operations that can be completed directly without additional planning.\n\n</taskTracking>\n\n</workflowGuidance>\n<toolUseInstructions>\nIf the user is requesting a code sample, you can answer it directly without using any tools.\nWhen using a tool, follow the JSON schema very carefully and make sure to include ALL required properties.\nNo need to ask permission before using a tool.\nNEVER say the name of a tool to a user. For example, instead of saying that you'll use the run_in_terminal tool, say \"I'll run the command in a terminal\".\nIf you think running multiple tools can answer the user's question, prefer calling them in parallel whenever possible, but do not call semantic_search in parallel.\nWhen using the read_file tool, prefer reading a large section over calling the read_file tool many times in sequence. You can also think of all the pieces you may be interested in and read them in parallel. Read large enough context to ensure you get what you need.\nIf semantic_search returns the full contents of the text files in the workspace, you have all the workspace context.\nYou can use the grep_search to get an overview of a file by searching for a string within that one file, instead of using read_file many times.\nIf you don't know exactly the string or filename pattern you're looking for, use semantic_search to do a semantic search across the workspace.\nDon't call the run_in_terminal tool multiple times in parallel. Instead, run one command and wait for the output before running the next command.\nWhen creating files, be intentional and avoid calling the create_file tool unnecessarily. Only create files that are essential to completing the user's request. \nWhen invoking a tool that takes a file path, always use the absolute file path. If the file has a scheme like untitled: or vscode-userdata:, then use a URI with the scheme.\nNEVER try to edit a file by running terminal commands unless the user specifically asks for it.\nTools can be disabled by the user. You may see tools used previously in the conversation that are not currently available. Be careful to only use the tools that are currently available to you.\n\n</toolUseInstructions>\n<communicationStyle>\nMaintain clarity and directness in all responses, delivering complete information while matching response depth to the task's complexity.\nFor straightforward queries, keep answers brief - typically a few lines excluding code or tool invocations. Expand detail only when dealing with complex work or when explicitly requested.\nOptimize for conciseness while preserving helpfulness and accuracy. Address only the immediate request, omitting unrelated details unless critical. Target 1-3 sentences for simple answers when possible.\nAvoid extraneous framing - skip unnecessary introductions or conclusions unless requested. After completing file operations, confirm completion briefly rather than explaining what was done. Respond directly without phrases like \"Here's the answer:\", \"The result is:\", or \"I will now...\".\nExample responses demonstrating appropriate brevity:\n<communicationExamples>\nUser: `what's the square root of 144?`\nAssistant: `12`\nUser: `which directory has the server code?`\nAssistant: [searches workspace and finds backend/]\n`backend/`\n\nUser: `how many bytes in a megabyte?`\nAssistant: `1048576`\n\nUser: `what files are in src/utils/?`\nAssistant: [lists directory and sees helpers.ts, validators.ts, constants.ts]\n`helpers.ts, validators.ts, constants.ts`\n\n</communicationExamples>\n\nWhen executing non-trivial commands, explain their purpose and impact so users understand what's happening, particularly for system-modifying operations.\nDo NOT use emojis unless explicitly requested by the user.\n\n</communicationStyle>\n<notebookInstructions>\nTo edit notebook files in the workspace, you can use the edit_notebook_file tool.\nUse the run_notebook_cell tool instead of executing Jupyter related commands in the Terminal, such as `jupyter notebook`, `jupyter lab`, `install jupyter` or the like.\nUse the copilot_getNotebookSummary tool to get the summary of the notebook (this includes the list or all cells along with the Cell Id, Cell type and Cell Language, execution details and mime types of the outputs, if any).\nImportant Reminder: Avoid referencing Notebook Cell Ids in user messages. Use cell number instead.\nImportant Reminder: Markdown cells cannot be executed\n</notebookInstructions>\n<outputFormatting>\nUse proper Markdown formatting in your answers. When referring to a filename or symbol in the user's workspace, wrap it in backticks.\n<example>\nThe class `Person` is in `src/models/person.ts`.\nThe function `calculateTotal` is defined in `lib/utils/math.ts`.\nYou can find the configuration in `config/app.config.json`.\n</example>\nUse KaTeX for math equations in your answers.\nWrap inline math equations in $.\nWrap more complex blocks of math equations in $$.\n\n</outputFormatting>\n\n<instructions>\nHere is a list of instruction files that contain rules for modifying or creating new code.\nThese files are important for ensuring that the code is modified or created correctly.\nPlease make sure to follow the rules specified in these files when working with the codebase.\nIf the file is not already available as attachment, use the `read_file` tool to acquire it.\nMake sure to acquire the instructions before making any changes to the code.\n| File | Applies To | Description |\n| ------- | --------- | ----------- |\n| 'vscode-userdata:/c%3A/Users/aaron/AppData/Roaming/Code%20-%20Insiders/User/prompts/general.instructions.md' | **/* |  |\n</instructions>\n"
                  }
                ]
              },
              {
                "role": 1,
                "content": [
                  {
                    "type": 1,
                    "text": "<environment_info>\nThe user's current OS is: Windows\nThe user's default shell is: \"pwsh.exe\". When you generate terminal commands, please generate them correctly for this shell.\n</environment_info>\n<workspace_info>\nThe following tasks can be executed using the run_task tool if they are not already running:\n<workspaceFolder path=\"c:\\\\src\\\\test\\\\ws2\">\n<task id=\"shell: echo\">\n{\n\t\"label\": \"echo\",\n\t\"type\": \"shell\",\n\t\"command\": \"echo Hello\"\n}\n</task>\n<task id=\"shell: getFile\">\n{\n\t\"label\": \"getFile\",\n\t\"type\": \"shell\",\n\t\"isBackground\": false,\n\t\"command\": \"cat ./file.txt\"\n}\n</task>\n\n</workspaceFolder>\nI am working in a workspace with the following folders:\n- c:\\src\\test\\ws2 \nI am working in a workspace that has the following structure:\n```\n1.ipynb\n1.py\n1.txt\n4.ipynb\nChipotle.solution.ipynb\ndataFrames.py\nexported.ipynb\nhello_world.ipynb\nhello.ipynb\nInteractive-1.ipynb\niris_analysis.ipynb\nmyLib.py\nnotebook.ipynb\nsample.csv\nsaved.ipynb\nscript.py\nscriptFun.py\ntest.md\nthis.txt\nunnecessaryEdit.txt\nUntitled-1.ipynb\nUntitled-2.ipynb\nUntitled-3.ipynb\nvars.ipynb\nvars.py\nzzz.ipynb\nzzz1.ipynb\nzzz2.ipynb\nzzzz.ipynb\n__pycache__/\ndirA/\n\ttest.ipynb\ndirB/\n```\nThis is the state of the context at this point in the conversation. The view of the workspace structure may be truncated. You can use tools to collect more context if needed.\n</workspace_info>\n"
                  },
                  {
                    "type": 3,
                    "cacheType": "ephemeral"
                  }
                ]
              },
              {
                "role": 1,
                "content": [
                  {
                    "type": 1,
                    "text": "<context>\nThe current date is October 31, 2025.\nTerminals:\nTerminal: pwsh\n\n</context>\n<reminderInstructions>\nWhen using the replace_string_in_file tool, include 3-5 lines of unchanged code before and after the string you want to replace, to make it unambiguous which part of the file should be edited.\nFor maximum efficiency, whenever you plan to perform multiple independent edit operations, invoke them simultaneously using multi_replace_string_in_file tool rather than sequentially. This will greatly improve user's cost and time efficiency leading to a better user experience. Do not announce which tool you're using (for example, avoid saying \"I'll implement all the changes using multi_replace_string_in_file\").\n\n</reminderInstructions>\n<userRequest>\ncreate a file that says \n\"hello\"\n</userRequest>\n"
                  }
                ]
              },
              {
                "role": 2,
                "content": [
                  {
                    "type": 1,
                    "text": "I'll create a simple file that says \"hello\" for you. "
                  }
                ],
                "toolCalls": [
                  {
                    "function": {
                      "name": "create_file",
                      "arguments": "{\"filePath\": \"c:\\\\src\\\\test\\\\ws2\\\\hello.txt\", \"content\": \"hello\"}"
                    },
                    "id": "toolu_vrtx_01NGpatVG4s9Bozweeox7g5T",
                    "type": "function"
                  }
                ]
              },
              {
                "role": 3,
                "content": [
                  {
                    "type": 1,
                    "text": "The following files were successfully edited:\nc:\\src\\test\\ws2\\hello.txt\n"
                  },
                  {
                    "type": 3,
                    "cacheType": "ephemeral"
                  }
                ],
                "toolCallId": "toolu_vrtx_01NGpatVG4s9Bozweeox7g5T"
              },
              {
                "role": 2,
                "content": [
                  {
                    "type": 1,
                    "text": "I've created a file called `hello.txt` in your workspace that contains the text \"hello\"."
                  },
                  {
                    "type": 3,
                    "cacheType": "ephemeral"
                  }
                ]
              },
              {
                "role": 1,
                "content": [
                  {
                    "type": 1,
                    "text": "<context>\nThe current date is October 31, 2025.\nTerminals:\nTerminal: pwsh\n\n</context>\n<reminderInstructions>\nWhen using the replace_string_in_file tool, include 3-5 lines of unchanged code before and after the string you want to replace, to make it unambiguous which part of the file should be edited.\nFor maximum efficiency, whenever you plan to perform multiple independent edit operations, invoke them simultaneously using multi_replace_string_in_file tool rather than sequentially. This will greatly improve user's cost and time efficiency leading to a better user experience. Do not announce which tool you're using (for example, avoid saying \"I'll implement all the changes using multi_replace_string_in_file\").\nDo NOT create a new markdown file to document each change or summarize your work unless specifically requested by the user.\n\n</reminderInstructions>\n<userRequest>\nchange it to (goodbye)\n</userRequest>\n"
                  },
                  {
                    "type": 3,
                    "cacheType": "ephemeral"
                  }
                ]
              }
            ]
          },
          "response": {
            "type": "success",
            "message": [
              ""
            ]
          }
        },
        {
          "id": "7b95ebe3",
          "kind": "element",
          "name": "Gh",
          "tokens": 2970,
          "maxTokens": 99003
        },
        {
          "id": "toolu_vrtx_01XwMqqVR8FPx8ea4tFrBaoi__vscode-1761926668998",
          "kind": "toolCall",
          "tool": "replace_string_in_file",
          "args": "{\"filePath\": \"c:\\\\src\\\\test\\\\ws2\\\\hello.txt\", \"oldString\": \"hello\", \"newString\": \"goodbye\"}",
          "time": "2025-10-31T16:05:06.771Z",
          "response": [
            "The following files were successfully edited:\nc:\\src\\test\\ws2\\hello.txt\n"
          ]
        },
        {
          "id": "e6406da8",
          "kind": "request",
          "type": "ChatMLSuccess",
          "name": "panel/editAgent",
          "metadata": {
            "requestType": "ChatCompletions",
            "model": "claude-sonnet-4.5",
            "maxPromptTokens": 127997,
            "maxResponseTokens": 16000,
            "location": 7,
            "postOptions": {
              "temperature": 0,
              "top_p": 1,
              "max_tokens": 16000,
              "n": 1,
              "stream": true
            },
            "startTime": "2025-10-31T16:05:06.777Z",
            "endTime": "2025-10-31T16:05:08.203Z",
            "duration": 1426,
            "ourRequestId": "0ab2d9e1-5bf0-4ab8-ac72-f509a79cac28",
            "requestId": "0ab2d9e1-5bf0-4ab8-ac72-f509a79cac28",
            "serverRequestId": "0ab2d9e1-5bf0-4ab8-ac72-f509a79cac28",
            "timeToFirstToken": 969,
            "usage": {
              "completion_tokens": 12,
              "prompt_tokens": 19372,
              "prompt_tokens_details": {
                "cached_tokens": 19013
              },
              "total_tokens": 19384
            },
            "tools": [
              {
                "function": {
                  "name": "logpoint_generator_add_logpoint",
                  "description": "Create a debugger log point that will print a log to the debug panel with the provided message when the debugger reaches that point. The message can be interpolated with variables from the debugger by surrounding with {}.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the file to read.",
                        "type": "string"
                      },
                      "lineNumber": {
                        "description": "The 1-based line number on which to add the log point. The line should contain executable code and needs to be after any variable referenced in the log message",
                        "type": "number"
                      },
                      "logMessage": {
                        "type": "string",
                        "description": "The message that will print in the debug panel. Debugger variables can be interpolated by surrounding the variable name with {}. The variables need to have already been assigned and exist in scope as the code on the target line."
                      }
                    },
                    "required": [
                      "filePath",
                      "lineNumber",
                      "logMessage"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceRunCodeSnippet",
                  "description": "Execute Python code snippets directly in the workspace environment. PREFERRED over terminal commands for running Python code. This tool automatically uses the correct Python interpreter configured for the workspace, eliminates shell escaping/quoting problems that plague terminal execution, and provides clean, properly formatted output with stdout/stderr correctly interleaved. Use this instead of `python -c \"code\"` or terminal commands when running Python snippets. Ideal for: testing code, running quick scripts, validating Python expressions, checking imports, and any Python execution within the workspace context. No temporary files needed - code runs directly in memory.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "codeSnippet": {
                        "type": "string",
                        "description": "The code snippet to run."
                      },
                      "workingDirectory": {
                        "type": "string",
                        "description": "The working directory to use for the code snippet. If the code snippet is pulled from a file, this should be the directory for the file. Especially if the snippet has imports."
                      },
                      "timeout": {
                        "type": "number",
                        "minimum": 0,
                        "description": "The timeout for the code snippet execution."
                      }
                    },
                    "required": [
                      "workspaceRoot",
                      "codeSnippet"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "configure_notebook",
                  "description": "Tool used to configure a Notebook. ALWAYS use this tool before running/executing any Notebook Cells for the first time or before listing/installing packages in Notebooks for the first time. I.e. there is no need to use this tool more than once for the same notebook.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the notebook with the active kernel.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "filePath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceFileSyntaxErrors",
                  "description": "Check Python file for syntax errors. Returns detailed error list with line numbers, messages, and error types. Use when: users report syntax problems, validating files before processing, debugging parse errors.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "fileUri": {
                        "type": "string",
                        "description": "The uri of the file to check for syntax errors. Must be a user file in the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot",
                      "fileUri"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceDocuments",
                  "description": "Search Pylance documentation for Python language server help, configuration guidance, feature explanations, and troubleshooting. Returns comprehensive answers about Pylance settings, capabilities, and usage. Use when users ask: How to configure Pylance? What features are available? How to fix Pylance issues?",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "search": {
                        "type": "string",
                        "description": "Detailed question in natural language. Think of it as a prompt for an LLM. Do not use keyword search terms."
                      }
                    },
                    "required": [
                      "search"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "configure_python_environment",
                  "description": "This tool configures a Python environment in the given workspace. ALWAYS Use this tool to set up the user's chosen environment and ALWAYS call this tool before using any other Python related tools or running any Python command in the terminal.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace for which a Python Environment needs to be configured."
                      }
                    },
                    "required": []
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceWorkspaceRoots",
                  "description": "Get workspace root directories. Returns workspace root for specific file or all workspace roots if no file provided. Use for: understanding workspace structure, getting paths for other operations.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "fileUri": {
                        "type": "string",
                        "description": "The uri of the file to check its workspace"
                      }
                    },
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceSyntaxErrors",
                  "description": "Validate Python code snippets for syntax errors without saving to file. Returns syntax error details with line numbers and descriptions. Use for: validating generated code, checking user code snippets, pre-execution validation.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The Python code to check for syntax errors."
                      },
                      "pythonVersion": {
                        "type": "string",
                        "description": "The version of Python to use for the syntax check. Must be a valid Python version string. ex) \"3.10\" or \"3.11.4\"."
                      }
                    },
                    "required": [
                      "code",
                      "pythonVersion"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceWorkspaceUserFiles",
                  "description": "Get list of all user Python files in workspace (excludes library/dependency files). Respects python.analysis.include/exclude settings. Use for: analyzing user code, searching project files, operating on user-created Python files.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceImports",
                  "description": "Analyze imports across workspace user files. Returns all top-level module names imported, including resolved and unresolved imports. Use for: finding missing dependencies, understanding project dependencies, analyzing import patterns.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_directory",
                  "description": "Create a new directory structure in the workspace. Will recursively create all directories in the path, like mkdir -p. You do not need to use this tool before using create_file, that tool will automatically create the needed directories.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "dirPath": {
                        "type": "string",
                        "description": "The absolute path to the directory to create."
                      }
                    },
                    "required": [
                      "dirPath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_file",
                  "description": "This is a tool for creating a new file in the workspace. The file will be created with the specified content. The directory will be created if it does not already exist. Never use this tool to edit a file that already exists.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "The absolute path to the file to create."
                      },
                      "content": {
                        "type": "string",
                        "description": "The content to write to the file."
                      }
                    },
                    "required": [
                      "filePath",
                      "content"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_new_jupyter_notebook",
                  "description": "Generates a new Jupyter Notebook (.ipynb) in VS Code. Jupyter Notebooks are interactive documents commonly used for data exploration, analysis, visualization, and combining code with narrative text. Prefer creating plain Python files or similar unless a user explicitly requests creating a new Jupyter Notebook or already has a Jupyter Notebook opened or exists in the workspace.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to use to generate the jupyter notebook. This should be a clear and concise description of the notebook the user wants to create."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_new_workspace",
                  "description": "Get comprehensive setup steps to help the user create complete project structures in a VS Code workspace. This tool is designed for full project initialization and scaffolding, not for creating individual files.\n\nWhen to use this tool:\n- User wants to create a new complete project from scratch\n- Setting up entire project frameworks (TypeScript projects, React apps, Node.js servers, etc.)\n- Initializing Model Context Protocol (MCP) servers with full structure\n- Creating VS Code extensions with proper scaffolding\n- Setting up Next.js, Vite, or other framework-based projects\n- User asks for \"new project\", \"create a workspace\", \"set up a [framework] project\"\n- Need to establish complete development environment with dependencies, config files, and folder structure\n\nWhen NOT to use this tool:\n- Creating single files or small code snippets\n- Adding individual files to existing projects\n- Making modifications to existing codebases\n- User asks to \"create a file\" or \"add a component\"\n- Simple code examples or demonstrations\n- Debugging or fixing existing code\n\nThis tool provides complete project setup including:\n- Folder structure creation\n- Package.json and dependency management\n- Configuration files (tsconfig, eslint, etc.)\n- Initial boilerplate code\n- Development environment setup\n- Build and run instructions\n\nUse other file creation tools for individual files within existing projects.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to use to generate the new workspace. This should be a clear and concise description of the workspace the user wants to create."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "edit_notebook_file",
                  "description": "This is a tool for editing an existing Notebook file in the workspace. Generate the \"explanation\" property first.\nThe system is very smart and can understand how to apply your edits to the notebooks.\nWhen updating the content of an existing cell, ensure newCode preserves whitespace and indentation exactly and does NOT include any code markers such as (...existing code...).",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file to edit, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1."
                      },
                      "cellId": {
                        "type": "string",
                        "description": "Id of the cell that needs to be deleted or edited. Use the value `TOP`, `BOTTOM` when inserting a cell at the top or bottom of the notebook, else provide the id of the cell after which a new cell is to be inserted. Remember, if a cellId is provided and editType=insert, then a cell will be inserted after the cell with the provided cellId."
                      },
                      "newCode": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "The code for the new or existing cell to be edited. Code should not be wrapped within <VSCode.Cell> tags. Do NOT include code markers such as (...existing code...) to indicate existing code."
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "The code for the new or existing cell to be edited. Code should not be wrapped within <VSCode.Cell> tags"
                            }
                          }
                        ]
                      },
                      "language": {
                        "type": "string",
                        "description": "The language of the cell. `markdown`, `python`, `javascript`, `julia`, etc."
                      },
                      "editType": {
                        "type": "string",
                        "enum": [
                          "insert",
                          "delete",
                          "edit"
                        ],
                        "description": "The operation peformed on the cell, whether `insert`, `delete` or `edit`.\nUse the `editType` field to specify the operation: `insert` to add a new cell, `edit` to modify an existing cell's content, and `delete` to remove a cell."
                      }
                    },
                    "required": [
                      "filePath",
                      "editType",
                      "cellId"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "fetch_webpage",
                  "description": "Fetches the main content from a web page. This tool is useful for summarizing or analyzing the content of a webpage. You should use this tool when you think the user is looking for information from a specific webpage.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "urls": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "An array of URLs to fetch content from."
                      },
                      "query": {
                        "type": "string",
                        "description": "The query to search for in the web page's content. This should be a clear and concise description of the content you want to find."
                      }
                    },
                    "required": [
                      "urls",
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "file_search",
                  "description": "Search for files in the workspace by glob pattern. This only returns the paths of matching files. Use this tool when you know the exact filename pattern of the files you're searching for. Glob patterns match from the root of the workspace folder. Examples:\n- **/*.{js,ts} to match all js/ts files in the workspace.\n- src/** to match all files under the top-level src folder.\n- **/foo/**/*.js to match all js files under any foo folder in the workspace.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "Search for files with names or paths matching this glob pattern."
                      },
                      "maxResults": {
                        "type": "number",
                        "description": "The maximum number of results to return. Do not use this unless necessary, it can slow things down. By default, only some matches are returned. If you use this and don't see what you're looking for, you can try again with a more specific query or a larger maxResults."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "grep_search",
                  "description": "Do a fast text search in the workspace. Use this tool when you want to search with an exact string or regex. If you are not sure what words will appear in the workspace, prefer using regex patterns with alternation (|) or character classes to search for multiple potential words at once instead of making separate searches. For example, use 'function|method|procedure' to look for all of those words at once. Use includePattern to search within files matching a specific pattern, or in a specific file, using a relative path. Use this tool when you want to see an overview of a particular file, instead of using read_file many times to look for code within a file.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The pattern to search for in files in the workspace. Use regex with alternation (e.g., 'word1|word2|word3') or character classes to find multiple potential words in a single search. Be sure to set the isRegexp property properly to declare whether it's a regex or plain text pattern. Is case-insensitive."
                      },
                      "isRegexp": {
                        "type": "boolean",
                        "description": "Whether the pattern is a regex."
                      },
                      "includePattern": {
                        "type": "string",
                        "description": "Search files matching this glob pattern. Will be applied to the relative path of files within the workspace. To search recursively inside a folder, use a proper glob pattern like \"src/folder/**\". Do not use | in includePattern."
                      },
                      "maxResults": {
                        "type": "number",
                        "description": "The maximum number of results to return. Do not use this unless necessary, it can slow things down. By default, only some matches are returned. If you use this and don't see what you're looking for, you can try again with a more specific query or a larger maxResults."
                      }
                    },
                    "required": [
                      "query",
                      "isRegexp"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_changed_files",
                  "description": "Get git diffs of current file changes in a git repository. Don't forget that you can use run_in_terminal to run git commands in a terminal as well.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repositoryPath": {
                        "type": "string",
                        "description": "The absolute path to the git repository to look for changes in. If not provided, the active git repository will be used."
                      },
                      "sourceControlState": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "staged",
                            "unstaged",
                            "merge-conflicts"
                          ]
                        },
                        "description": "The kinds of git state to filter by. Allowed values are: 'staged', 'unstaged', and 'merge-conflicts'. If not provided, all states will be included."
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_errors",
                  "description": "Get any compile or lint errors in a specific file or across all files. If the user mentions errors or problems in a file, they may be referring to these. Use the tool to see the same errors that the user is seeing. If the user asks you to analyze all errors, or does not specify a file, use this tool to gather errors for all files. Also use this tool after editing a file to validate the change.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePaths": {
                        "description": "The absolute paths to the files or folders to check for errors. Omit 'filePaths' when retrieving all errors.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "copilot_getNotebookSummary",
                  "description": "This is a tool returns the list of the Notebook cells along with the id, cell types, line ranges, language, execution information and output mime types for each cell. This is useful to get Cell Ids when executing a notebook or determine what cells have been executed and what order, or what cells have outputs. If required to read contents of a cell use this to determine the line range of a cells, and then use read_file tool to read a specific line range. Requery this tool if the contents of the notebook change.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb"
                      }
                    },
                    "required": [
                      "filePath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_project_setup_info",
                  "description": "Do not call this tool without first calling the tool to create a workspace. This tool provides a project setup information for a Visual Studio Code workspace based on a project type and programming language.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "projectType": {
                        "type": "string",
                        "description": "The type of project to create. Supported values are: 'python-script', 'python-project', 'mcp-server', 'model-context-protocol-server', 'vscode-extension', 'next-js', 'vite' and 'other'"
                      }
                    },
                    "required": [
                      "projectType"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_search_view_results",
                  "description": "The results from the search view"
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_vscode_api",
                  "description": "Get comprehensive VS Code API documentation and references for extension development. This tool provides authoritative documentation for VS Code's extensive API surface, including proposed APIs, contribution points, and best practices. Use this tool for understanding complex VS Code API interactions.\n\nWhen to use this tool:\n- User asks about specific VS Code APIs, interfaces, or extension capabilities\n- Need documentation for VS Code extension contribution points (commands, views, settings, etc.)\n- Questions about proposed APIs and their usage patterns\n- Understanding VS Code extension lifecycle, activation events, and packaging\n- Best practices for VS Code extension development architecture\n- API examples and code patterns for extension features\n- Troubleshooting extension-specific issues or API limitations\n\nWhen NOT to use this tool:\n- Creating simple standalone files or scripts unrelated to VS Code extensions\n- General programming questions not specific to VS Code extension development\n- Questions about using VS Code as an editor (user-facing features)\n- Non-extension related development tasks\n- File creation or editing that doesn't involve VS Code extension APIs\n\nCRITICAL usage guidelines:\n1. Always include specific API names, interfaces, or concepts in your query\n2. Mention the extension feature you're trying to implement\n3. Include context about proposed vs stable APIs when relevant\n4. Reference specific contribution points when asking about extension manifest\n5. Be specific about the VS Code version or API version when known\n\nScope: This tool is for EXTENSION DEVELOPMENT ONLY - building tools that extend VS Code itself, not for general file creation or non-extension programming tasks.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to search vscode documentation for. Should contain all relevant context."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github_repo",
                  "description": "Searches a GitHub repository for relevant source code snippets. Only use this tool if the user is very clearly asking for code snippets from a specific GitHub repository. Do not use this tool for Github repos that the user has open in their workspace.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "string",
                        "description": "The name of the Github repository to search for code in. Should must be formatted as '<owner>/<repo>'."
                      },
                      "query": {
                        "type": "string",
                        "description": "The query to search for repo. Should contain all relevant context."
                      }
                    },
                    "required": [
                      "repo",
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "install_extension",
                  "description": "Install an extension in VS Code. Use this tool to install an extension in Visual Studio Code as part of a new workspace creation process only.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the extension to install. This should be in the format <publisher>.<extension>."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the extension to install. This should be a clear and concise description of the extension."
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "list_code_usages",
                  "description": "Request to list all usages (references, definitions, implementations etc) of a function, class, method, variable etc. Use this tool when \n1. Looking for a sample implementation of an interface or class\n2. Checking how a function is used throughout the codebase.\n3. Including and updating all usages when changing a function, method, or constructor",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "symbolName": {
                        "type": "string",
                        "description": "The name of the symbol, such as a function name, class name, method name, variable name, etc."
                      },
                      "filePaths": {
                        "type": "array",
                        "description": "One or more file paths which likely contain the definition of the symbol. For instance the file which declares a class or function. This is optional but will speed up the invocation of this tool and improve the quality of its output.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "symbolName"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "list_dir",
                  "description": "List the contents of a directory. Result will have the name of the child. If the name ends in /, it's a folder, otherwise a file",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "description": "The absolute path to the directory to list."
                      }
                    },
                    "required": [
                      "path"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "multi_replace_string_in_file",
                  "description": "This tool allows you to apply multiple replace_string_in_file operations in a single call, which is more efficient than calling replace_string_in_file multiple times. It takes an array of replacement operations and applies them sequentially. Each replacement operation has the same parameters as replace_string_in_file: filePath, oldString, newString, and explanation. This tool is ideal when you need to make multiple edits across different files or multiple edits in the same file. The tool will provide a summary of successful and failed operations.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "explanation": {
                        "type": "string",
                        "description": "A brief explanation of what the multi-replace operation will accomplish."
                      },
                      "replacements": {
                        "type": "array",
                        "description": "An array of replacement operations to apply sequentially.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "explanation": {
                              "type": "string",
                              "description": "A brief explanation of this specific replacement operation."
                            },
                            "filePath": {
                              "type": "string",
                              "description": "An absolute path to the file to edit."
                            },
                            "oldString": {
                              "type": "string",
                              "description": "The exact literal text to replace, preferably unescaped. Include at least 3 lines of context BEFORE and AFTER the target text, matching whitespace and indentation precisely. If this string is not the exact literal text or does not match exactly, this replacement will fail."
                            },
                            "newString": {
                              "type": "string",
                              "description": "The exact literal text to replace `oldString` with, preferably unescaped. Provide the EXACT text. Ensure the resulting code is correct and idiomatic."
                            }
                          },
                          "required": [
                            "explanation",
                            "filePath",
                            "oldString",
                            "newString"
                          ]
                        },
                        "minItems": 1
                      }
                    },
                    "required": [
                      "explanation",
                      "replacements"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "open_simple_browser",
                  "description": "Preview a website or open a URL in the editor's Simple Browser. Useful for quickly viewing locally hosted websites, demos, or resources without leaving the coding environment.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "The website URL to preview or open in the Simple Browser inside the editor. Must be either an http or https URL"
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "read_file",
                  "description": "Read the contents of a file. Line numbers are 1-indexed. This tool will truncate its output at 2000 lines and may be called repeatedly with offset and limit parameters to read larger files in chunks.",
                  "parameters": {
                    "type": "object",
                    "required": [
                      "filePath"
                    ],
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the file to read.",
                        "type": "string"
                      },
                      "offset": {
                        "description": "Optional: the 1-based line number to start reading from. Only use this if the file is too large to read at once. If not specified, the file will be read from the beginning.",
                        "type": "number"
                      },
                      "limit": {
                        "description": "Optional: the maximum number of lines to read. Only use this together with `offset` if the file is too large to read at once.",
                        "type": "number"
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "read_notebook_cell_output",
                  "description": "This tool will retrieve the output for a notebook cell from its most recent execution or restored from disk. The cell may have output even when it has not been run in the current kernel session. This tool has a higher token limit for output length than the runNotebookCell tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb"
                      },
                      "cellId": {
                        "type": "string",
                        "description": "The ID of the cell for which output should be retrieved."
                      }
                    },
                    "required": [
                      "filePath",
                      "cellId"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "replace_string_in_file",
                  "description": "This is a tool for making edits in an existing file in the workspace. For moving or renaming files, use run in terminal tool with the 'mv' command instead. For larger edits, split them into smaller edits and call the edit tool multiple times to ensure accuracy. Before editing, always ensure you have the context to understand the file's contents and context. To edit a file, provide: 1) filePath (absolute path), 2) oldString (MUST be the exact literal text to replace including all whitespace, indentation, newlines, and surrounding code etc), and 3) newString (MUST be the exact literal text to replace \\`oldString\\` with (also including all whitespace, indentation, newlines, and surrounding code etc.). Ensure the resulting code is correct and idiomatic.). Each use of this tool replaces exactly ONE occurrence of oldString.\n\nCRITICAL for \\`oldString\\`: Must uniquely identify the single instance to change. Include at least 3 lines of context BEFORE and AFTER the target text, matching whitespace and indentation precisely. If this string matches multiple locations, or does not match exactly, the tool will fail. Never use 'Lines 123-456 omitted' from summarized documents or ...existing code... comments in the oldString or newString.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the file to edit."
                      },
                      "oldString": {
                        "type": "string",
                        "description": "The exact literal text to replace, preferably unescaped. For single replacements (default), include at least 3 lines of context BEFORE and AFTER the target text, matching whitespace and indentation precisely. For multiple replacements, specify expected_replacements parameter. If this string is not the exact literal text (i.e. you escaped it) or does not match exactly, the tool will fail."
                      },
                      "newString": {
                        "type": "string",
                        "description": "The exact literal text to replace `old_string` with, preferably unescaped. Provide the EXACT text. Ensure the resulting code is correct and idiomatic."
                      }
                    },
                    "required": [
                      "filePath",
                      "oldString",
                      "newString"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_notebook_cell",
                  "description": "This is a tool for running a code cell in a notebook file directly in the notebook editor. The output from the execution will be returned. Code cells should be run as they are added or edited when working through a problem to bring the kernel state up to date and ensure the code executes successfully. Code cells are ready to run and don't require any pre-processing. If asked to run the first cell in a notebook, you should run the first code cell since markdown cells cannot be executed. NOTE: Avoid executing Markdown cells or providing Markdown cell IDs, as Markdown cells cannot be  executed.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb"
                      },
                      "reason": {
                        "type": "string",
                        "description": "An optional explanation of why the cell is being run. This will be shown to the user before the tool is run and is not necessary if it's self-explanatory."
                      },
                      "cellId": {
                        "type": "string",
                        "description": "The ID for the code cell to execute. Avoid providing markdown cell IDs as nothing will be executed."
                      },
                      "continueOnError": {
                        "type": "boolean",
                        "description": "Whether or not execution should continue for remaining cells if an error is encountered. Default to false unless instructed otherwise."
                      }
                    },
                    "required": [
                      "filePath",
                      "cellId"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_vscode_command",
                  "description": "Run a command in VS Code. Use this tool to run a command in Visual Studio Code as part of a new workspace creation process only.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "commandId": {
                        "type": "string",
                        "description": "The ID of the command to execute. This should be in the format <command>."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the command to execute. This should be a clear and concise description of the command."
                      },
                      "args": {
                        "type": "array",
                        "description": "The arguments to pass to the command. This should be an array of strings.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "commandId",
                      "name"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "semantic_search",
                  "description": "Run a natural language search for relevant code or documentation comments from the user's current workspace. Returns relevant code snippets from the user's current workspace if it is large, or the full contents of the workspace if it is small.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "The query to search the codebase for. Should contain all relevant context. Should ideally be text that might appear in the codebase, such as function names, variable names, or comments."
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "test_failure",
                  "description": "Includes test failure information in the prompt."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "vscode_searchExtensions_internal",
                  "description": "This is a tool for browsing Visual Studio Code Extensions Marketplace. It allows the model to search for extensions and retrieve detailed information about them. The model should use this tool whenever it needs to discover extensions or resolve information about known ones. To use the tool, the model has to provide the category of the extensions, relevant search keywords, or known extension IDs. Note that search results may include false positives, so reviewing and filtering is recommended.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "description": "The category of extensions to search for",
                        "enum": [
                          "AI",
                          "Azure",
                          "Chat",
                          "Data Science",
                          "Debuggers",
                          "Extension Packs",
                          "Education",
                          "Formatters",
                          "Keymaps",
                          "Language Packs",
                          "Linters",
                          "Machine Learning",
                          "Notebooks",
                          "Programming Languages",
                          "SCM Providers",
                          "Snippets",
                          "Testing",
                          "Themes",
                          "Visualization",
                          "Other"
                        ]
                      },
                      "keywords": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The keywords to search for"
                      },
                      "ids": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The ids of the extensions to search for"
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "create_and_run_task",
                  "description": "Creates and runs a build, run, or custom task for the workspace by generating or adding to a tasks.json file based on the project structure (such as package.json or README.md). If the user asks to build, run, launch and they have no tasks.json file, use this tool. If they ask to create or add a task, use this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceFolder": {
                        "type": "string",
                        "description": "The absolute path of the workspace folder where the tasks.json file will be created."
                      },
                      "task": {
                        "type": "object",
                        "description": "The task to add to the new tasks.json file.",
                        "properties": {
                          "label": {
                            "type": "string",
                            "description": "The label of the task."
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the task. The only supported value is 'shell'.",
                            "enum": [
                              "shell"
                            ]
                          },
                          "command": {
                            "type": "string",
                            "description": "The shell command to run for the task. Use this to specify commands for building or running the application."
                          },
                          "args": {
                            "type": "array",
                            "description": "The arguments to pass to the command.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "isBackground": {
                            "type": "boolean",
                            "description": "Whether the task runs in the background without blocking the UI or other tasks. Set to true for long-running processes like watch tasks or servers that should continue executing without requiring user attention. When false, the task will block the terminal until completion."
                          },
                          "problemMatcher": {
                            "type": "array",
                            "description": "The problem matcher to use to parse task output for errors and warnings. Can be a predefined matcher like '$tsc' (TypeScript), '$eslint - stylish', '$gcc', etc., or a custom pattern defined in tasks.json. This helps VS Code display errors in the Problems panel and enables quick navigation to error locations.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "group": {
                            "type": "string",
                            "description": "The group to which the task belongs."
                          }
                        },
                        "required": [
                          "label",
                          "type",
                          "command"
                        ]
                      }
                    },
                    "required": [
                      "task",
                      "workspaceFolder"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_task_output",
                  "description": "Get the output of a task",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The task ID for which to get the output."
                      },
                      "workspaceFolder": {
                        "type": "string",
                        "description": "The workspace folder path containing the task"
                      }
                    },
                    "required": [
                      "id",
                      "workspaceFolder"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_terminal_output",
                  "description": "Get the output of a terminal command previously started with run_in_terminal",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the terminal to check."
                      }
                    },
                    "required": [
                      "id"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "manage_todo_list",
                  "description": "Manage a structured todo list to track progress and plan tasks throughout your coding session. Use this tool VERY frequently to ensure task visibility and proper planning.\n\nWhen to use this tool:\n- Complex multi-step work requiring planning and tracking\n- When user provides multiple tasks or requests (numbered/comma-separated)\n- After receiving new instructions that require multiple steps\n- BEFORE starting work on any todo (mark as in-progress)\n- IMMEDIATELY after completing each todo (mark completed individually)\n- When breaking down larger tasks into smaller actionable steps\n- To give users visibility into your progress and planning\n\nWhen NOT to use:\n- Single, trivial tasks that can be completed in one step\n- Purely conversational/informational requests\n- When just reading files or performing simple searches\n\nCRITICAL workflow:\n1. Plan tasks by writing todo list with specific, actionable items\n2. Mark ONE todo as in-progress before starting work\n3. Complete the work for that specific todo\n4. Mark that todo as completed IMMEDIATELY\n5. Move to next todo and repeat\n\nTodo states:\n- not-started: Todo not yet begun\n- in-progress: Currently working (limit ONE at a time)\n- completed: Finished successfully\n\nIMPORTANT: Mark todos completed as soon as they are done. Do not batch completions.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "todoList": {
                        "type": "array",
                        "description": "Complete array of all todo items (required for write operation, ignored for read). Must include ALL items - both existing and new.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number",
                              "description": "Unique identifier for the todo. Use sequential numbers starting from 1."
                            },
                            "title": {
                              "type": "string",
                              "description": "Concise action-oriented todo label (3-7 words). Displayed in UI."
                            },
                            "description": {
                              "type": "string",
                              "description": "Detailed context, requirements, or implementation notes. Include file paths, specific methods, or acceptance criteria."
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "not-started",
                                "in-progress",
                                "completed"
                              ],
                              "description": "not-started: Not begun | in-progress: Currently working (max 1) | completed: Fully finished with no blockers"
                            }
                          },
                          "required": [
                            "id",
                            "title",
                            "description",
                            "status"
                          ]
                        }
                      },
                      "operation": {
                        "type": "string",
                        "enum": [
                          "write",
                          "read"
                        ],
                        "description": "write: Replace entire todo list with new content. read: Retrieve current todo list. ALWAYS provide complete list when writing - partial updates not supported."
                      }
                    },
                    "required": [
                      "operation"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_in_terminal",
                  "description": "This tool allows you to execute PowerShell commands in a persistent terminal session, preserving environment variables, working directory, and other context across multiple commands.\n\nCommand Execution:\n- Use semicolons ; to chain commands on one line, NEVER use && even when asked explicitly\n- Prefer pipelines | for object-based data flow\n- Never create a sub-shell (eg. powershell -c \"command\") unless explicitly asked\n\nDirectory Management:\n- Must use absolute paths to avoid navigation issues\n- Use $PWD or Get-Location for current directory\n- Use Push-Location/Pop-Location for directory stack\n\nProgram Execution:\n- Supports .NET, Python, Node.js, and other executables\n- Install modules via Install-Module, Install-Package\n- Use Get-Command to verify cmdlet/function availability\n\nBackground Processes:\n- For long-running tasks (e.g., servers), set isBackground=true\n- Returns a terminal ID for checking status and runtime later\n- Use Start-Job for background PowerShell jobs\n\nOutput Management:\n- Output is automatically truncated if longer than 60KB to prevent context overflow\n- Use Select-Object, Where-Object, Format-Table to filter output\n- Use -First/-Last parameters to limit results\n- For pager commands, add | Out-String or | Format-List\n\nBest Practices:\n- Use proper cmdlet names instead of aliases in scripts\n- Quote paths with spaces: \"C:\\Path With Spaces\"\n- Prefer PowerShell cmdlets over external commands when available\n- Prefer idiomatic PowerShell like Get-ChildItem instead of dir or ls for file listings\n- Use Test-Path to check file/directory existence\n- Be specific with Select-Object properties to avoid excessive output",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "command": {
                        "type": "string",
                        "description": "The command to run in the terminal."
                      },
                      "explanation": {
                        "type": "string",
                        "description": "A one-sentence description of what the command does. This will be shown to the user before the command is run."
                      },
                      "isBackground": {
                        "type": "boolean",
                        "description": "Whether the command starts a background process. If true, the command will run in the background and you will not see the output. If false, the tool call will block on the command finishing, and then you will get the output. Examples of background processes: building in watch mode, starting a server. You can check the output of a background process later on by using get_terminal_output."
                      }
                    },
                    "required": [
                      "command",
                      "explanation",
                      "isBackground"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "run_task",
                  "description": "Runs a VS Code task.\n\n- If you see that an appropriate task exists for building or running code, prefer to use this tool to run the task instead of using the run_in_terminal tool.\n- Make sure that any appropriate build or watch task is running before trying to run tests or execute code.\n- If the user asks to run a task, use this tool to do so.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceFolder": {
                        "type": "string",
                        "description": "The workspace folder path containing the task"
                      },
                      "id": {
                        "type": "string",
                        "description": "The task ID to run."
                      }
                    },
                    "required": [
                      "workspaceFolder",
                      "id"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "runSubagent",
                  "description": "Launch a new agent to handle complex, multi-step tasks autonomously. This tool is good at researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries, use this agent to perform the search for you.\n\n- Agents do not run async or in the background, you will wait for the agent's result.\n- When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n - Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n - The agent's outputs should generally be trusted\n - Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "prompt": {
                        "type": "string",
                        "description": "A detailed description of the task for the agent to perform"
                      },
                      "description": {
                        "type": "string",
                        "description": "A short (3-5 word) description of the task"
                      }
                    },
                    "required": [
                      "prompt",
                      "description"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "runTests",
                  "description": "Runs unit tests in files. Use this tool if the user asks to run tests or when you want to validate changes using unit tests, and prefer using this tool instead of the terminal tool. When possible, always try to provide `files` paths containing the relevant unit tests in order to avoid unnecessarily long test runs. This tool outputs detailed information about the results of the test run. Set mode=\"coverage\" to also collect coverage and optionally provide coverageFiles for focused reporting.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Absolute paths to the test files to run. If not provided, all test files will be run."
                      },
                      "testNames": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "An array of test names to run. Depending on the context, test names defined in code may be strings or the names of functions or classes containing the test cases. If not provided, all tests in the files will be run."
                      },
                      "mode": {
                        "type": "string",
                        "enum": [
                          "run",
                          "coverage"
                        ],
                        "description": "Execution mode: \"run\" (default) runs tests normally, \"coverage\" collects coverage."
                      },
                      "coverageFiles": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "When mode=\"coverage\": absolute file paths to include detailed coverage info for. Only the first matching file will be summarized."
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "terminal_last_command",
                  "description": "Get the last command run in the active terminal."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "terminal_selection",
                  "description": "Get the current selection in the active terminal."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "notebook_install_packages",
                  "description": "Install a list of packages on a notebook kernel to be used within that notebook. This tool should be used when working with a jupyter notebook with python code cells. Do not use this tool if not already working with a notebook, or for a language other than python. If the tool configure_notebooks exists, then ensure to call configure_notebooks before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the notebook with the active kernel.",
                        "type": "string"
                      },
                      "packageList": {
                        "description": "A list of packages to install.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "filePath",
                      "packageList"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "notebook_list_packages",
                  "description": "List the installed packages that are currently available in the selected kernel for a notebook editor. This tool should be used when working with a jupyter notebook with python code cells. Do not use this tool if not already working with a notebook, or for a language other than python. If the tool configure_notebooks exists, then ensure to call configure_notebooks before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "description": "The absolute path of the notebook with the active kernel.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "filePath"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_python_environment_details",
                  "description": "This tool will retrieve the details of the Python Environment for the specified file or workspace. The details returned include the 1. Type of Python Environment (conda, venv, etec), 2. Version of Python, 3. List of all installed Python packages with their versions. ALWAYS call configure_python_environment before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace to get the environment information for."
                      }
                    },
                    "required": []
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "get_python_executable_details",
                  "description": "This tool will retrieve the details of the Python Environment for the specified file or workspace. ALWAYS use this tool before executing any Python command in the terminal. This tool returns the details of how to construct the fully qualified path and or command including details such as arguments required to run Python in a terminal. Note: Instead of executing `python --version` or `python -c 'import sys; print(sys.executable)'`, use this tool to get the Python executable path to replace the `python` command. E.g. instead of using `python -c 'import sys; print(sys.executable)'`, use this tool to build the command `conda run -n <env_name> -c 'import sys; print(sys.executable)'`. ALWAYS call configure_python_environment before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace to get the executable information for. If not provided, the current workspace will be used. Where possible pass the path to the file or workspace."
                      }
                    },
                    "required": []
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "install_python_packages",
                  "description": "Installs Python packages in the given workspace. Use this tool to install Python packages in the user's chosen Python environment. ALWAYS call configure_python_environment before using this tool.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "packageList": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The list of Python packages to install."
                      },
                      "resourcePath": {
                        "type": "string",
                        "description": "The path to the Python file or workspace into which the packages are installed. If not provided, the current workspace will be used. Where possible pass the path to the file or workspace."
                      }
                    },
                    "required": [
                      "packageList"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "evaluateExpressionInDebugSession",
                  "description": "Evaluate an expression in a specific debug session",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "debugSessionId": {
                        "type": "number",
                        "description": "The ID of the debug session to evaluate the expression in"
                      },
                      "expression": {
                        "type": "string",
                        "description": "The expression to evaluate in the debug session"
                      }
                    },
                    "required": [
                      "debugSessionId",
                      "expression"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "listDebugSessions",
                  "description": "List all active debug sessions with their IDs, names, and expression language IDs",
                  "parameters": {
                    "type": "object",
                    "properties": {}
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_activePullRequest",
                  "description": "Get comprehensive information about the active GitHub pull request (PR). The active PR is the one that is currently checked out. This includes the PR title, full description, list of changed files, review comments, PR state, and status checks/CI results. For PRs created by Copilot, it also includes the session logs which indicate the development process and decisions made by the coding agent. When asked about the active or current pull request, do this first! Use this tool for any request related to \"current changes,\" \"pull request details,\" \"what changed,\" \"PR status,\" or similar queries even if the user does not explicitly mention \"pull request.\" When asked to use this tool, ALWAYS use it."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_copilot-coding-agent",
                  "description": "Completes the provided task using an asynchronous coding agent. Use when the user wants copilot continue completing a task in the background or asynchronously. IMPORTANT: Use this tool LAST/FINAL when users mention '#github-pull-request_copilot-coding-agent' in their query. This indicates they want the task/job implemented by the remote coding agent after all other analysis, planning, and preparation is complete. Call this tool at the END to hand off the fully-scoped task to the asynchronous GitHub Copilot coding agent. The agent will create a new branch, implement the changes, and open a pull request. Always use this tool as the final step when the hashtag is mentioned, after completing any other necessary tools or analysis first.",
                  "parameters": {
                    "type": "object",
                    "required": [
                      "title",
                      "body"
                    ],
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "The title of the issue. Populate from chat context."
                      },
                      "body": {
                        "type": "string",
                        "description": "The body/description of the issue. Populate from chat context."
                      },
                      "existingPullRequest": {
                        "type": "number",
                        "description": "The number of an existing pull request related to the current coding agent task. Look in the chat history for this number.  In the chat it may look like 'Coding agent will continue work in #17...'. In this example, you should return '17'."
                      }
                    }
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_doSearch",
                  "description": "Execute a GitHub search given a well formed GitHub search query. Call github-pull-request_formSearchQuery first to get good search syntax and pass the exact result in as the 'query'.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "query": {
                        "type": "string",
                        "description": "A well formed GitHub search query using proper GitHub search syntax."
                      }
                    },
                    "required": [
                      "query",
                      "repo"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_formSearchQuery",
                  "description": "Converts natural language to a GitHub search query. Should ALWAYS be called before doing a search.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "naturalLanguageString": {
                        "type": "string",
                        "description": "A plain text description of what the search should be."
                      }
                    },
                    "required": [
                      "naturalLanguageString"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_issue_fetch",
                  "description": "Get a GitHub issue/PR's details as a JSON object.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue/PR from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue/PR from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue/PR from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "issueNumber": {
                        "type": "number",
                        "description": "The number of the issue/PR to get."
                      }
                    },
                    "required": [
                      "issueNumber"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_openPullRequest",
                  "description": "Get comprehensive information about the GitHub pull request (PR) which is currently visible, but not necessarily checked out. This includes the PR title, full description, list of changed files, review comments, PR state, and status checks/CI results. For PRs created by Copilot, it also includes the session logs which indicate the development process and decisions made by the coding agent. When asked about the currently open pull request, do this first! Use this tool for any request related to \"pull request details,\" \"what changed,\" \"PR status,\" or similar queries even if the user does not explicitly mention \"pull request.\" When asked to use this tool, ALWAYS use it."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_renderIssues",
                  "description": "Render issue items from an issue search in a markdown table. The markdown table will be displayed directly to the user by the tool. No further display should be done after this!",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "arrayOfIssues": {
                        "type": "array",
                        "description": "An array of GitHub Issues.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "The title of the issue."
                            },
                            "number": {
                              "type": "number",
                              "description": "The number of the issue."
                            },
                            "url": {
                              "type": "string",
                              "description": "The URL of the issue."
                            },
                            "state": {
                              "type": "string",
                              "description": "The state of the issue (open/closed)."
                            },
                            "createdAt": {
                              "type": "string",
                              "description": "The creation date of the issue."
                            },
                            "updatedAt": {
                              "type": "string",
                              "description": "The last update date of the issue."
                            },
                            "closedAt": {
                              "type": "string",
                              "description": "The closing date of the issue."
                            },
                            "author": {
                              "type": "object",
                              "description": "The author of the issue.",
                              "properties": {
                                "login": {
                                  "type": "string",
                                  "description": "The login of the author."
                                },
                                "url": {
                                  "type": "string",
                                  "description": "The URL of the author's profile."
                                }
                              }
                            },
                            "labels": {
                              "type": "array",
                              "description": "The labels associated with the issue.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the label."
                                  },
                                  "color": {
                                    "type": "string",
                                    "description": "The color of the label."
                                  }
                                }
                              }
                            },
                            "assignees": {
                              "type": "array",
                              "description": "The assignees of the issue.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "login": {
                                    "type": "string",
                                    "description": "The login of the assignee."
                                  },
                                  "url": {
                                    "type": "string",
                                    "description": "The URL of the assignee's profile."
                                  }
                                }
                              }
                            },
                            "commentsCount": {
                              "type": "number",
                              "description": "The number of comments on the issue."
                            }
                          },
                          "required": [
                            "title",
                            "number",
                            "url",
                            "state",
                            "createdAt",
                            "author"
                          ]
                        }
                      },
                      "totalIssues": {
                        "type": "number",
                        "description": "The total number of issues in the search."
                      }
                    },
                    "required": [
                      "arrayOfIssues",
                      "totalIssues"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "github-pull-request_suggest-fix",
                  "description": "Summarize and suggest a fix for a GitHub issue.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repo": {
                        "type": "object",
                        "description": "The repository to get the issue from.",
                        "properties": {
                          "owner": {
                            "type": "string",
                            "description": "The owner of the repository to get the issue from."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the repository to get the issue from."
                          }
                        },
                        "required": [
                          "owner",
                          "name"
                        ]
                      },
                      "issueNumber": {
                        "type": "number",
                        "description": "The number of the issue to get."
                      }
                    },
                    "required": [
                      "issueNumber",
                      "repo"
                    ]
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "kustoSchema",
                  "description": "Returns the Schema of a Kusto Database (including table, column, function names and more). Always use this tool when generating Kusto KQL queries without making assumptions about the available tables, columns and functions."
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceInstalledTopLevelModules",
                  "description": "Get available top-level modules from installed Python packages in environment. Shows what can be imported. Use for: checking if packages are installed, verifying import availability, helping users understand available modules.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "pythonEnvironment": {
                        "type": "string",
                        "description": "The Python environment to use. Must be a value returned by the pylancePythonEnvironments tool. If pythonEnvironment is missing, the python environment of the workspace will be used."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceInvokeRefactoring",
                  "description": "Apply automated code refactoring to Python files. Returns refactored content (does not modify original file) unless mode is \"update\". Use for: extracting functions, organizing imports, improving code structure, applying refactoring patterns.  Optional \"mode\" parameter: \"update\" updates the file, \"edits\" returns a WorkspaceEdit, \"string\" returns updated content as string. If mode is not specified, \"update\" will be used as the default. The \"edits\" mode is helpful for determining if a file needs changes (for example, to remove unused imports or fix import formatting) without making any modifications; if no changes are needed, the result will be either an empty WorkspaceEdit or a message indicating that no text edits were found. Available refactorings: source.unusedImports: - Removes all unused import statements from a Python file. Use when imports are imported but never referenced in the code. Requires fileUri parameter pointing to a Python file with unused imports.\nsource.convertImportFormat: - Converts import statements between absolute and relative formats according to python.analysis.importFormat setting. Use when import format consistency is needed. Requires fileUri parameter pointing to a Python file with imports to convert.\nsource.fixAll.pylance: - Applies all available automatic code fixes from python.analysis.fixAll setting. Use when multiple code issues need to be addressed simultaneously. Requires fileUri parameter pointing to a Python file with fixable issues.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "fileUri": {
                        "type": "string",
                        "description": "The uri of the file to invoke the refactoring."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the refactoring to invoke. This must be one of these [source.unusedImports, source.convertImportFormat, source.fixAll.pylance]"
                      },
                      "mode": {
                        "type": "string",
                        "enum": [
                          "update",
                          "edits",
                          "string"
                        ],
                        "description": "Determines the output mode: \"update\" updates the file directly, \"edits\" returns a WorkspaceEdit, \"string\" returns the updated content as a string. If omitted, \"update\" will be used as the default. The \"edits\" mode is especially useful for checking if any changes are needed (such as unused imports or import formatting issues) without modifying the file, as it will return a WorkspaceEdit only if edits are required."
                      }
                    },
                    "required": [
                      "fileUri",
                      "name"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylancePythonEnvironments",
                  "description": "Get Python environment information for workspace: current active environment and all available environments. Use for: Python environment issues, switching environments, understanding Python setup.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceSettings",
                  "description": "Get current Python analysis settings and configuration for a workspace. Returns all \"python.analysis.*\" settings with default vs user-configured indicators. Use for: troubleshooting configuration, checking current settings, diagnosing analysis issues.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      }
                    },
                    "required": [
                      "workspaceRoot"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              },
              {
                "function": {
                  "name": "mcp_pylance_mcp_s_pylanceUpdatePythonEnvironment",
                  "description": "Switch active Python environment for workspace to different Python installation or virtual environment. Updates settings and ensures subsequent operations use new environment. Use for: changing Python versions, switching to virtual environments, resolving environment issues.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "workspaceRoot": {
                        "type": "string",
                        "description": "The root directory uri of the workspace."
                      },
                      "pythonEnvironment": {
                        "type": "string",
                        "description": "The Python environment to use. Must be either a value returned by the pylancePythonEnvironments tool or the absolute path to a Python executable."
                      }
                    },
                    "required": [
                      "workspaceRoot",
                      "pythonEnvironment"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  }
                },
                "type": "function"
              }
            ]
          },
          "requestMessages": {
            "messages": [
              {
                "role": 0,
                "content": [
                  {
                    "type": 1,
                    "text": "You are an expert AI programming assistant, working with a user in the VS Code editor.\nWhen asked for your name, you must respond with \"GitHub Copilot\". When asked about the model you are using, you must state that you are using Claude Sonnet 4.5.\nFollow the user's requirements carefully & to the letter.\nFollow Microsoft content policies.\nAvoid content that violates copyrights.\nIf you are asked to generate content that is harmful, hateful, racist, sexist, lewd, or violent, only respond with \"Sorry, I can't assist with that.\"\nKeep your answers short and impersonal.\n<instructions>\nYou are a highly sophisticated automated coding agent with expert-level knowledge across many different programming languages and frameworks and software engineering tasks - this encompasses debugging issues, implementing new features, restructuring code, and providing code explanations, among other engineering activities.\nThe user will ask a question, or ask you to perform a task, and it may require lots of research to answer correctly. There is a selection of tools that let you perform actions or retrieve helpful context to answer the user's question.\nBy default, implement changes rather than only suggesting them. If the user's intent is unclear, infer the most useful likely action and proceed with using tools to discover any missing details instead of guessing. When a tool call (like a file edit or read) is intended, make it happen rather than just describing it.\nYou can call tools repeatedly to take actions or gather as much context as needed until you have completed the task fully. Don't give up unless you are sure the request cannot be fulfilled with the tools you have. It's YOUR RESPONSIBILITY to make sure that you have done all you can to collect necessary context.\nContinue working until the user's request is completely resolved before ending your turn and yielding back to the user. Only terminate your turn when you are certain the task is complete. Do not stop or hand back to the user when you encounter uncertainty — research or deduce the most reasonable approach and continue.\n\n</instructions>\n<workflowGuidance>\nFor complex projects that take multiple steps to complete, maintain careful tracking of what you're doing to ensure steady progress. Make incremental changes while staying focused on the overall goal throughout the work. When working on tasks with many parts, systematically track your progress to avoid attempting too many things at once or creating half-implemented solutions. Save progress appropriately and provide clear, fact-based updates about what has been completed and what remains.\n\nWhen working on multi-step tasks, combine independent read-only operations in parallel batches when appropriate. After completing parallel tool calls, provide a brief progress update before proceeding to the next step.\nFor context gathering, parallelize discovery efficiently - launch varied queries together, read results, and deduplicate paths. Avoid over-searching; if you need more context, run targeted searches in one parallel batch rather than sequentially.\nGet enough context quickly to act, then proceed with implementation. Balance thorough understanding with forward momentum.\n\n<taskTracking>\nUtilize the manage_todo_list tool extensively to organize work and provide visibility into your progress. This is essential for planning and ensures important steps aren't forgotten.\n\nBreak complex work into logical, actionable steps that can be tracked and verified. Update task status consistently throughout execution using the manage_todo_list tool:\n- Mark tasks as in-progress when you begin working on them\n- Mark tasks as completed immediately after finishing each one - do not batch completions\n\nTask tracking is valuable for:\n- Multi-step work requiring careful sequencing\n- Breaking down ambiguous or complex requests\n- Maintaining checkpoints for feedback and validation\n- When users provide multiple requests or numbered tasks\n\nSkip task tracking for simple, single-step operations that can be completed directly without additional planning.\n\n</taskTracking>\n\n</workflowGuidance>\n<toolUseInstructions>\nIf the user is requesting a code sample, you can answer it directly without using any tools.\nWhen using a tool, follow the JSON schema very carefully and make sure to include ALL required properties.\nNo need to ask permission before using a tool.\nNEVER say the name of a tool to a user. For example, instead of saying that you'll use the run_in_terminal tool, say \"I'll run the command in a terminal\".\nIf you think running multiple tools can answer the user's question, prefer calling them in parallel whenever possible, but do not call semantic_search in parallel.\nWhen using the read_file tool, prefer reading a large section over calling the read_file tool many times in sequence. You can also think of all the pieces you may be interested in and read them in parallel. Read large enough context to ensure you get what you need.\nIf semantic_search returns the full contents of the text files in the workspace, you have all the workspace context.\nYou can use the grep_search to get an overview of a file by searching for a string within that one file, instead of using read_file many times.\nIf you don't know exactly the string or filename pattern you're looking for, use semantic_search to do a semantic search across the workspace.\nDon't call the run_in_terminal tool multiple times in parallel. Instead, run one command and wait for the output before running the next command.\nWhen creating files, be intentional and avoid calling the create_file tool unnecessarily. Only create files that are essential to completing the user's request. \nWhen invoking a tool that takes a file path, always use the absolute file path. If the file has a scheme like untitled: or vscode-userdata:, then use a URI with the scheme.\nNEVER try to edit a file by running terminal commands unless the user specifically asks for it.\nTools can be disabled by the user. You may see tools used previously in the conversation that are not currently available. Be careful to only use the tools that are currently available to you.\n\n</toolUseInstructions>\n<communicationStyle>\nMaintain clarity and directness in all responses, delivering complete information while matching response depth to the task's complexity.\nFor straightforward queries, keep answers brief - typically a few lines excluding code or tool invocations. Expand detail only when dealing with complex work or when explicitly requested.\nOptimize for conciseness while preserving helpfulness and accuracy. Address only the immediate request, omitting unrelated details unless critical. Target 1-3 sentences for simple answers when possible.\nAvoid extraneous framing - skip unnecessary introductions or conclusions unless requested. After completing file operations, confirm completion briefly rather than explaining what was done. Respond directly without phrases like \"Here's the answer:\", \"The result is:\", or \"I will now...\".\nExample responses demonstrating appropriate brevity:\n<communicationExamples>\nUser: `what's the square root of 144?`\nAssistant: `12`\nUser: `which directory has the server code?`\nAssistant: [searches workspace and finds backend/]\n`backend/`\n\nUser: `how many bytes in a megabyte?`\nAssistant: `1048576`\n\nUser: `what files are in src/utils/?`\nAssistant: [lists directory and sees helpers.ts, validators.ts, constants.ts]\n`helpers.ts, validators.ts, constants.ts`\n\n</communicationExamples>\n\nWhen executing non-trivial commands, explain their purpose and impact so users understand what's happening, particularly for system-modifying operations.\nDo NOT use emojis unless explicitly requested by the user.\n\n</communicationStyle>\n<notebookInstructions>\nTo edit notebook files in the workspace, you can use the edit_notebook_file tool.\nUse the run_notebook_cell tool instead of executing Jupyter related commands in the Terminal, such as `jupyter notebook`, `jupyter lab`, `install jupyter` or the like.\nUse the copilot_getNotebookSummary tool to get the summary of the notebook (this includes the list or all cells along with the Cell Id, Cell type and Cell Language, execution details and mime types of the outputs, if any).\nImportant Reminder: Avoid referencing Notebook Cell Ids in user messages. Use cell number instead.\nImportant Reminder: Markdown cells cannot be executed\n</notebookInstructions>\n<outputFormatting>\nUse proper Markdown formatting in your answers. When referring to a filename or symbol in the user's workspace, wrap it in backticks.\n<example>\nThe class `Person` is in `src/models/person.ts`.\nThe function `calculateTotal` is defined in `lib/utils/math.ts`.\nYou can find the configuration in `config/app.config.json`.\n</example>\nUse KaTeX for math equations in your answers.\nWrap inline math equations in $.\nWrap more complex blocks of math equations in $$.\n\n</outputFormatting>\n\n<instructions>\nHere is a list of instruction files that contain rules for modifying or creating new code.\nThese files are important for ensuring that the code is modified or created correctly.\nPlease make sure to follow the rules specified in these files when working with the codebase.\nIf the file is not already available as attachment, use the `read_file` tool to acquire it.\nMake sure to acquire the instructions before making any changes to the code.\n| File | Applies To | Description |\n| ------- | --------- | ----------- |\n| 'vscode-userdata:/c%3A/Users/aaron/AppData/Roaming/Code%20-%20Insiders/User/prompts/general.instructions.md' | **/* |  |\n</instructions>\n"
                  }
                ]
              },
              {
                "role": 1,
                "content": [
                  {
                    "type": 1,
                    "text": "<environment_info>\nThe user's current OS is: Windows\nThe user's default shell is: \"pwsh.exe\". When you generate terminal commands, please generate them correctly for this shell.\n</environment_info>\n<workspace_info>\nThe following tasks can be executed using the run_task tool if they are not already running:\n<workspaceFolder path=\"c:\\\\src\\\\test\\\\ws2\">\n<task id=\"shell: echo\">\n{\n\t\"label\": \"echo\",\n\t\"type\": \"shell\",\n\t\"command\": \"echo Hello\"\n}\n</task>\n<task id=\"shell: getFile\">\n{\n\t\"label\": \"getFile\",\n\t\"type\": \"shell\",\n\t\"isBackground\": false,\n\t\"command\": \"cat ./file.txt\"\n}\n</task>\n\n</workspaceFolder>\nI am working in a workspace with the following folders:\n- c:\\src\\test\\ws2 \nI am working in a workspace that has the following structure:\n```\n1.ipynb\n1.py\n1.txt\n4.ipynb\nChipotle.solution.ipynb\ndataFrames.py\nexported.ipynb\nhello_world.ipynb\nhello.ipynb\nInteractive-1.ipynb\niris_analysis.ipynb\nmyLib.py\nnotebook.ipynb\nsample.csv\nsaved.ipynb\nscript.py\nscriptFun.py\ntest.md\nthis.txt\nunnecessaryEdit.txt\nUntitled-1.ipynb\nUntitled-2.ipynb\nUntitled-3.ipynb\nvars.ipynb\nvars.py\nzzz.ipynb\nzzz1.ipynb\nzzz2.ipynb\nzzzz.ipynb\n__pycache__/\ndirA/\n\ttest.ipynb\ndirB/\n```\nThis is the state of the context at this point in the conversation. The view of the workspace structure may be truncated. You can use tools to collect more context if needed.\n</workspace_info>\n"
                  },
                  {
                    "type": 3,
                    "cacheType": "ephemeral"
                  }
                ]
              },
              {
                "role": 1,
                "content": [
                  {
                    "type": 1,
                    "text": "<context>\nThe current date is October 31, 2025.\nTerminals:\nTerminal: pwsh\n\n</context>\n<reminderInstructions>\nWhen using the replace_string_in_file tool, include 3-5 lines of unchanged code before and after the string you want to replace, to make it unambiguous which part of the file should be edited.\nFor maximum efficiency, whenever you plan to perform multiple independent edit operations, invoke them simultaneously using multi_replace_string_in_file tool rather than sequentially. This will greatly improve user's cost and time efficiency leading to a better user experience. Do not announce which tool you're using (for example, avoid saying \"I'll implement all the changes using multi_replace_string_in_file\").\n\n</reminderInstructions>\n<userRequest>\ncreate a file that says \n\"hello\"\n</userRequest>\n"
                  }
                ]
              },
              {
                "role": 2,
                "content": [
                  {
                    "type": 1,
                    "text": "I'll create a simple file that says \"hello\" for you. "
                  }
                ],
                "toolCalls": [
                  {
                    "function": {
                      "name": "create_file",
                      "arguments": "{\"filePath\": \"c:\\\\src\\\\test\\\\ws2\\\\hello.txt\", \"content\": \"hello\"}"
                    },
                    "id": "toolu_vrtx_01NGpatVG4s9Bozweeox7g5T",
                    "type": "function"
                  }
                ]
              },
              {
                "role": 3,
                "content": [
                  {
                    "type": 1,
                    "text": "The following files were successfully edited:\nc:\\src\\test\\ws2\\hello.txt\n"
                  }
                ],
                "toolCallId": "toolu_vrtx_01NGpatVG4s9Bozweeox7g5T"
              },
              {
                "role": 2,
                "content": [
                  {
                    "type": 1,
                    "text": "I've created a file called `hello.txt` in your workspace that contains the text \"hello\"."
                  },
                  {
                    "type": 3,
                    "cacheType": "ephemeral"
                  }
                ]
              },
              {
                "role": 1,
                "content": [
                  {
                    "type": 1,
                    "text": "<context>\nThe current date is October 31, 2025.\nTerminals:\nTerminal: pwsh\n\n</context>\n<reminderInstructions>\nWhen using the replace_string_in_file tool, include 3-5 lines of unchanged code before and after the string you want to replace, to make it unambiguous which part of the file should be edited.\nFor maximum efficiency, whenever you plan to perform multiple independent edit operations, invoke them simultaneously using multi_replace_string_in_file tool rather than sequentially. This will greatly improve user's cost and time efficiency leading to a better user experience. Do not announce which tool you're using (for example, avoid saying \"I'll implement all the changes using multi_replace_string_in_file\").\nDo NOT create a new markdown file to document each change or summarize your work unless specifically requested by the user.\n\n</reminderInstructions>\n<userRequest>\nchange it to (goodbye)\n</userRequest>\n"
                  },
                  {
                    "type": 3,
                    "cacheType": "ephemeral"
                  }
                ]
              },
              {
                "role": 2,
                "content": [
                  {
                    "type": 1,
                    "text": ""
                  }
                ],
                "toolCalls": [
                  {
                    "function": {
                      "name": "replace_string_in_file",
                      "arguments": "{\"filePath\": \"c:\\\\src\\\\test\\\\ws2\\\\hello.txt\", \"oldString\": \"hello\", \"newString\": \"goodbye\"}"
                    },
                    "id": "toolu_vrtx_01XwMqqVR8FPx8ea4tFrBaoi",
                    "type": "function"
                  }
                ]
              },
              {
                "role": 3,
                "content": [
                  {
                    "type": 1,
                    "text": "The following files were successfully edited:\nc:\\src\\test\\ws2\\hello.txt\n"
                  },
                  {
                    "type": 3,
                    "cacheType": "ephemeral"
                  }
                ],
                "toolCallId": "toolu_vrtx_01XwMqqVR8FPx8ea4tFrBaoi"
              }
            ]
          },
          "response": {
            "type": "success",
            "message": [
              "Done. The file now says \"goodbye\"."
            ]
          }
        }
      ]
    }
  ]
}