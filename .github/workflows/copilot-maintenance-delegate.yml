name: Copilot Maintenance Delegate

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: "Pull request number to delegate to @copilot"
        required: true
      instructions:
        description: "Optional extra guidance for the Copilot agent"
        required: false
        default: ""
  check_suite:
    types:
      - completed

permissions:
  pull-requests: write
  issues: write
  checks: read

jobs:
  manual:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Post manual delegation comment
        uses: actions/github-script@v7
        with:
          script: |
            const prNumberRaw = core.getInput('pr_number');
            const prNumber = Number(prNumberRaw);
            if (!prNumberRaw || Number.isNaN(prNumber) || prNumber < 1) {
              core.setFailed(`Invalid pull request number: ${prNumberRaw}`);
              return;
            }

            const basePrompt = 'Please investigate the failing GitHub Actions checks for this pull request. Identify the root cause, outline the fix, and push updates or document the next steps.';
            const extra = core.getInput('instructions')?.trim() ?? '';
            const instructions = extra.length > 0
              ? `${basePrompt}\n\nAdditional context:\n${extra}`
              : basePrompt;

            const marker = '<!-- copilot-maintenance-delegate:manual -->';
            const body = [
              marker,
              `@copilot ${instructions}`,
              '',
              'Please leave a brief status update once the issue is resolved.'
            ].join('\n');

            const { owner, repo } = context.repo;

            try {
              await github.rest.pulls.get({
                owner,
                repo,
                pull_number: prNumber,
              });
            } catch (error) {
              core.setFailed(`Unable to load pull request #${prNumber}: ${error.message}`);
              return;
            }

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: prNumber,
              body,
            });

            core.info(`Posted @copilot comment to pull request #${prNumber}.`);

  automatic:
    if: github.event_name == 'check_suite'
    runs-on: ubuntu-latest
    steps:
      - name: Delegate failed workflow run to Copilot
        uses: actions/github-script@v7
        with:
          script: |
            const actionableConclusions = new Set([
              'action_required',
              'cancelled',
              'failure',
              'stale',
              'timed_out',
            ]);

            const suite = context.payload.check_suite;
            if (!suite) {
              core.info('No check suite payload present; skipping.');
              return;
            }

            const conclusion = suite.conclusion ?? 'unknown';
            if (!actionableConclusions.has(conclusion)) {
              core.info(`Check suite concluded with "${conclusion}"; no escalation needed.`);
              return;
            }

            const associatedPulls = suite.pull_requests ?? [];
            const prNumbers = associatedPulls
              .map(pr => pr?.number)
              .filter(number => typeof number === 'number' && number > 0);

            if (prNumbers.length === 0) {
              core.info('No pull requests are associated with this check suite; skipping.');
              return;
            }

            const { owner, repo } = context.repo;

            const checkRuns = [];
            for await (const response of github.paginate.iterator(
              github.rest.checks.listForSuite,
              {
                owner,
                repo,
                check_suite_id: suite.id,
                per_page: 100,
              }
            )) {
              for (const run of response.data) {
                checkRuns.push(run);
              }
            }

            const failingRuns = checkRuns.filter(run => actionableConclusions.has(run.conclusion ?? ''));
            if (failingRuns.length === 0) {
              core.info('No failing check runs detected; skipping escalation.');
              return;
            }

            const maxEntries = 10;
            const formatRun = run => {
              const conclusionLabel = (run.conclusion ?? 'unknown').toUpperCase();
              const attempt = typeof run.run_attempt === 'number' ? ` (attempt ${run.run_attempt})` : '';
              const summaryLine = (run.output?.summary || '')
                .split('\n')
                .map(line => line.trim())
                .filter(Boolean)[0];
              let line = `- ${conclusionLabel}: [${run.name}](${run.html_url})${attempt}`;
              if (summaryLine) {
                line += `\n  - ${summaryLine}`;
              }
              return line;
            };

            const formattedRuns = failingRuns
              .slice(0, maxEntries)
              .map(formatRun);

            if (failingRuns.length > maxEntries) {
              formattedRuns.push(`- ... ${failingRuns.length - maxEntries} additional failing checks omitted.`);
            }

            const basePrompt = 'Please investigate the failing GitHub Actions checks listed below, identify the root cause, outline the fix, and share the next steps for this pull request.';

            const metadata = [];
            if (suite.name) {
              metadata.push(`- **Workflow**: ${suite.name}`);
            }
            if (suite.head_branch) {
              metadata.push(`- **Branch**: ${suite.head_branch}`);
            }
            if (suite.head_sha) {
              metadata.push(`- **Commit**: [${suite.head_sha.slice(0, 7)}](https://github.com/${owner}/${repo}/commit/${suite.head_sha})`);
            }
            if (suite.head_commit?.author?.name) {
              metadata.push(`- **Latest author**: ${suite.head_commit.author.name}`);
            }
            metadata.push(`- **Conclusion**: ${conclusion.toUpperCase()}`);

            const marker = `<!-- copilot-maintenance-delegate:check-suite:${suite.id} -->`;
            const commentBody = [
              marker,
              `@copilot ${basePrompt}`,
              '',
              '### Failing checks',
              formattedRuns.join('\n'),
              '',
              '### Context',
              metadata.join('\n'),
            ].join('\n');

            const findExistingComment = async issueNumber => {
              for await (const response of github.paginate.iterator(
                github.rest.issues.listComments,
                {
                  owner,
                  repo,
                  issue_number: issueNumber,
                  per_page: 100,
                }
              )) {
                const match = response.data.find(comment => typeof comment.body === 'string' && comment.body.includes(marker));
                if (match) {
                  return match;
                }
              }
              return undefined;
            };

            for (const prNumber of prNumbers) {
              const existing = await findExistingComment(prNumber);
              if (existing) {
                core.info(`A delegation comment already exists on pull request #${prNumber}; skipping.`);
                continue;
              }

              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: commentBody,
              });

              core.info(`Posted @copilot comment to pull request #${prNumber}.`);
            }
